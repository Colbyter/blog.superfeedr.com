---
layout: post
title: Protocols over APIs
categories: []
author_name: Julien
author_uri: http://twitter.com/julien51
author_email_md5: b30ce50678f0e934eaa6697425c59dd7
---

There is not a week where I don't see developers discovering that a given API has been deprecated. Today's disappointment (at least in my twitter stream) comes from the "Google Chart Tool API":https://developers.google.com/chart/.

Don't get me wrong. *I feel for these developers* and I would be upset should the same problem happen to me. Now, being upset is great. Learning how to prevent that is better, and I believe there are many ways to avoid that. The most obvious one is to re-invent the wheel as suggested by "Adactio":https://twitter.com/#!/Adactio.

<blockquote class="twitter-tweet tw-align-center"><p>Next time someone asks why I'm reinventing the wheel, I'm telling them it's because the wheel API is being deprecated. <a href="https://t.co/fVozGTfZ" title="https://developers.google.com/chart/terms">developers.google.com/chart/terms</a></p>&mdash; Jeremy Keith (@adactio) <a href="https://twitter.com/adactio/status/202420431284740096" data-datetime="2012-05-15T15:29:26+00:00">May 15, 2012</a></blockquote>
<script src="//platform.twitter.com/widgets.js" charset="utf-8"></script>

That is obviously not always possible... and is probably not the right solution either because _re-inventing the wheel can be a real rabbit-hole_ which may take you to building a power grid!

Another solution is to favor protocols over APIs. To over-simplify things, an *API is just a combination of uni-laterally decided upon protocol and an endpoint*. _The Twitter API is the twitter protocol used against twitter.com_. Got it? This is what Status.net understood when they decided to write a compatible API... for which you would just have to change the endpoint from twitter.com to status.net. That worked until Twitter changed its API.

Now, if developers relied more on protocols, that means that when a providers disappears or deprecates a service, developers could just change the endpoint, without changing anything in their code to make sure everything keeps working. Re-using code is the most satisfying feeling for many developers. 

Want an example? Last week, I got tired of "myopenid.net":http://myopenid.com/ inability to stay up. I used them as a provider for "my personal openid endpoint":http://ouvre-boite.com/. Changing the provider was as simple as changing the <code>openid2.provider</code> href in the HTML and I was done.

When you decide to work with a given's service API, please tell them *you want their API to become a protocol*, something for which _you are a stake holder_, that you can help improve. Also, if there is *any open protocol or any schema* that does what this API aims at doing, please convince them that it's way to go, that this will make the web better and that will make your code more useful to more people :)

At Superfeedr, we're obviously big promoters of protocols ("XMPP":http://superfeedr.com/documentation/#xmpp_pubsub, "PubSubHubbub":http://superfeedr.com/documentation/#pubsubhubbub, ATOM, ActivityStreams) over APIs, and we obviously kept the same philosophy for "Msgboy":http://msgboy.com/. 





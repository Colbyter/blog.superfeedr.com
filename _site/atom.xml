<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Superfeedr Blog : Real-time cloudy thoughts from a super-hero</title>
    <link href="http://blog.superfeedr.com/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="http://blog.superfeedr.com/" rel="alternate" type="text/html"/>
    <link rel="hub" href="http://superfeedr.com/hubbub" />
    <updated>2009-09-18T11:10:03-07:00</updated>
    <id>http://blog.superfeedr.com/</id>
    
    
    <entry>
        <title>The New Atom Schema is up!</title>
        
        <category term="API" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Atom" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="schema" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/09/18/atom-schema.html"/>
        <published>2009-09-18T00:00:00-07:00</published>
        <updated>2009-09-18T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/09/18/atom-schema</id>
        <content type="html">&lt;p&gt;We deployed yesterday a new code for our parsers, and it now includes a more &lt;a href="http://superfeedr.com/documentation#schema"&gt;complete schema&lt;/a&gt; that will allow you to do a lot more things with superfeedr!&lt;/p&gt;
&lt;h3&gt;Content or summary?&lt;/h3&gt;
&lt;p&gt;Up until now we were considering that anything was a summary, which wasn&amp;#8217;t really accurate since some feeds actually &lt;strong&gt;offer the whole content&lt;/strong&gt;. We fixed that. If the entry contains the full content, you&amp;#8217;ll have a &lt;code&gt;&amp;lt;content&amp;gt;&lt;/code&gt; tag, if not, then, it will have a &lt;code&gt;&amp;lt;summary&amp;gt;&lt;/code&gt; tag.&lt;/p&gt;
&lt;h3&gt;Links&lt;/h3&gt;
&lt;p&gt;The biggest addition is the fact that &lt;code&gt;&amp;lt;entry&amp;gt;&lt;/code&gt; elements now include all the &lt;code&gt;&amp;lt;links&amp;gt;&lt;/code&gt; of the original entry, including attachments. Of course, to differentiate between them you can use the &lt;em&gt;&lt;code&gt;"rel"&lt;/code&gt; value&lt;/em&gt;, as well as &lt;code&gt;"type"&lt;/code&gt; which gives you the &lt;em&gt;mime type&lt;/em&gt;. For example, here is what you&amp;#8217;d receive for this flick &lt;span class="caps"&gt;RSS&lt;/span&gt; feed :&lt;br /&gt;
&lt;script src="http://gist.github.com/189179.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;As you can see, there are 2 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements, &lt;strong&gt;one for the entry&lt;/strong&gt; (the page that contains the image), and &lt;strong&gt;one for the image itself&lt;/strong&gt;. These links are various and may include links to the &lt;em&gt;comments section, to the &lt;span class="caps"&gt;RSS&lt;/span&gt; feed of comments, to any attachment, to related articles&lt;/em&gt;&amp;#8230; etc.&lt;/p&gt;
&lt;h3&gt;Categories&lt;/h3&gt;
&lt;p&gt;The Web2.0 era has long be associated with the presence of &lt;strong&gt;tags&lt;/strong&gt;, implemented by &lt;a href="http://delicious.com"&gt;Delicious&lt;/a&gt;, &lt;a href="http://flickr.com"&gt;Flickr&lt;/a&gt;, &lt;a href="http://youtube.com"&gt;Youtube&lt;/a&gt; and by bloggers. They are very useful to group things and can do a better job than search engines to find &amp;#8220;binary&amp;#8221; content. &lt;strong&gt;Superfeedr will now provide the tags&lt;/strong&gt; (or categories from the original entries).&lt;br /&gt;
In the above example, you can see that the tags used are &lt;em&gt;sergio, expo, lyon, western and prefecture&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Authors&lt;/h3&gt;
&lt;p&gt;Last, but not least, we now support &lt;strong&gt;author informations&lt;/strong&gt;. There can be several authors in one entry. For each author, we provide (when available) a &lt;em&gt;name, an email address and a profile &lt;span class="caps"&gt;URI&lt;/span&gt;&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;d like anything else to be added, please let us know in the comments. With the current information, we estimate we cover 80-90% of the original entry content. Also, if you&amp;#8217;re not satisfied with our mapping, please do not hesitate to &lt;a href="http://blog.superfeedr.com/Atom/schema/a-better-schema/"&gt;suggest fixes&lt;/a&gt; as well.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Real-time RSS notifications on your iPhone</title>
        
        <category term="real-time" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="notification" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="RSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="iPhone" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/09/11/real-time-rss-notification-on-iphone.html"/>
        <published>2009-09-11T00:00:00-07:00</published>
        <updated>2009-09-11T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/09/11/real-time-rss-notification-on-iphone</id>
        <content type="html">&lt;p&gt;I have always been a great fan of the iPhone (I had mine on June 29th 2007 : iPhone D-day), but I haven&amp;#8217;t found many applications that were making good use of the &amp;#8220;notification&amp;#8221; feature that Apple added in its last iPhone OS, until today.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://appnotifications.com/system/app_icons/0000/0001/appnotifications-icos-twitt_large.png?1252050483" style="float:right;margin:10px;" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.appnotifications.com/"&gt;AppNotification&lt;/a&gt; is an app that allows you to receive any notification. Its creator, Fabien just spent the last day interfacing his app with &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; and the result is here today : you can get &lt;strong&gt;real-time &lt;span class="caps"&gt;RSS&lt;/span&gt; notifications on your iPhone&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;It&amp;#8217;s quite easy :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;First, &lt;a href="http://bit.ly/19T8V7"&gt;buy the app from the iTunes store&lt;/a&gt; : $1.99.&lt;/li&gt;
	&lt;li&gt;Then, &lt;a href="http://appnotifications.com/account/new"&gt;create an account&lt;/a&gt; and enter your credentials into the App.&lt;/li&gt;
	&lt;li&gt;Add the &lt;a href="http://www.appnotifications.com/account/apps/22/authorize"&gt;Superfeedr application&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://appnotifications.com/account/app_user_connections/2619/edit"&gt;Enter a list of &lt;span class="caps"&gt;RSS&lt;/span&gt; feeds&lt;/a&gt; which will be pushed to your iPhone&lt;/li&gt;
	&lt;li&gt;&amp;#8230; &lt;em&gt;wait for notifications to come&lt;/em&gt;!&lt;sup class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I&amp;#8217;ve added a few &lt;a href="http://spy.appspot.com/"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt; from Spy&lt;/a&gt;, as well as the &lt;a href="http://weather.yahooapis.com/forecastrss?p=94123"&gt;weather in San Francisco&lt;/a&gt; or the &lt;span class="caps"&gt;RSS&lt;/span&gt; for &lt;a href="http://feeds.delicious.com/v2/rss/url/00f1b15f8f356e11da3dc20f28a915a8?count=15"&gt;Superfeedr&amp;#8217;s delicious page&lt;/a&gt;, but you could also add any &lt;span class="caps"&gt;RSS&lt;/span&gt; that you&amp;#8217;d like.&lt;/p&gt;
&lt;p&gt;How cool is that?&lt;/p&gt;
&lt;p class="footnote" id="fn1"&gt;&lt;sup&gt;1&lt;/sup&gt; If you have a superfeedr account, you can generate notifications to the &lt;a href="http://superfeedr.com/dummy.xml"&gt;dummy feed&lt;/a&gt;, in the console, as long as you add it to your feeds into AppNotifications.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>The little lie about Real-time Data</title>
        
        <category term="real-time" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="lie" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/09/10/the-little-lie-about-real-time.html"/>
        <published>2009-09-10T00:00:00-07:00</published>
        <updated>2009-09-10T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/09/10/the-little-lie-about-real-time</id>
        <content type="html">&lt;p&gt;It is very exciting to see all the jazz about &lt;strong&gt;real-time data&lt;/strong&gt; being available. It is however a little disappointing that the &lt;span class="caps"&gt;RSS&lt;/span&gt; vs. Atom war is starting again through the &lt;em&gt;PubSubHubbub vs. RssCloud conflict&lt;/em&gt; (read &lt;a href="http://www.techcrunch.com/2009/09/09/rsscloud-vs-pubsubhubbub-why-the-fat-pings-win/"&gt;Techcrunch&amp;#8217;s post&lt;/a&gt; about that). &lt;a href="http://en.blog.wordpress.com/2009/09/07/rss-in-the-clouds/"&gt;Wordpress said they will adopt RssCloud&lt;/a&gt;, while &lt;a href="http://googlecode.blogspot.com/2009/08/towards-programmable-web-pubsubhubbub.html"&gt;Google massively adopted PubSubHubbub&lt;/a&gt; and &lt;a href="http://sixapart.com"&gt;SixApart&lt;/a&gt; showed strong interest for the latter.&lt;/p&gt;
&lt;p&gt;The only little lie about that is that &lt;em&gt;almost all of the data that you can access through these hubs or clouds, was actually already available through other Real-time&lt;/em&gt; (or close to real-time) means. SixApart has had an &lt;strong&gt;AtomStream&lt;/strong&gt; for years, Google implemented the &lt;strong&gt;changes.xml syntax&lt;/strong&gt; a few years ago and Wordpress announced last year that they had an &lt;strong&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt; stream&lt;/strong&gt; with all the blog posts and comments.&lt;/p&gt;
&lt;p&gt;Again, don&amp;#8217;t get me wrong : this is really exciting that from having 1 technology for each provider we now have &lt;del&gt;almost&lt;/del&gt; the same protocols across the board, but I think that proves also why we need services like Superfeedr : a huge part of the content that is published daily is not being pushed to anywhere.&lt;/p&gt;
&lt;p&gt;Again, pushing your content to reduce the &amp;#8220;polling&amp;#8221; load makes sense, but we strongly believe that &lt;strong&gt;the vast majority of the data out there will probably never be pushed&lt;/strong&gt; to any hub of cloud, and that&amp;#8217;s precisely where Superfeedr is so useful!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>What API to choose</title>
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="API" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/09/08/what-api-to-choose.html"/>
        <published>2009-09-08T00:00:00-07:00</published>
        <updated>2009-09-08T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/09/08/what-api-to-choose</id>
        <content type="html">&lt;p&gt;Superfeedr is &lt;em&gt;technology-agnostic&lt;/em&gt;, which means that we don&amp;#8217;t force you into any &lt;span class="caps"&gt;API&lt;/span&gt;. &lt;a href="http://blog.superfeedr.com/OSS/gospel/kind-of-open-source/"&gt;We use standards&lt;/a&gt; so that our users aren&amp;#8217;t locked in any way to our service. However, being agnostic doesn&amp;#8217;t mean that a solution is not better than another one in your specific case.&lt;/p&gt;
&lt;p&gt;Actually, we even believe that in some cases, it is better to use &lt;span class="caps"&gt;XMPP&lt;/span&gt; and in some it is better to use PubSubHubbub. We creates this small &amp;#8220;decision-chart&amp;#8221; to help you decide with yes/no questions. Of course, this would apply to 99% of cases and there will always be times that this chart is wrong, but I am pretty confident that it should work for you.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/api-decision-chart.png" style="margin: 10px; width:80%;" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;What do you think?&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Getting Started with PubSubHubbub</title>
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="API" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/09/02/getting-started-with-pubsubhubbub.html"/>
        <published>2009-09-02T00:00:00-07:00</published>
        <updated>2009-09-02T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/09/02/getting-started-with-pubsubhubbub</id>
        <content type="html">&lt;p&gt;To my knowledge, Superfeedr is the only non-google PubSubHubbub out there. Let&amp;#8217;s see why and how to use it.&lt;/p&gt;
&lt;h3&gt;Why using PubSubHubbub?&lt;/h3&gt;
&lt;p&gt;Superfeedr &lt;a href="http://superfeedr.com/documentation"&gt;provides 2 &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. Here are some reasons why you&amp;#8217;d be better off &lt;strong&gt;using the PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;You don&amp;#8217;t want to run a background job&lt;/li&gt;
	&lt;li&gt;You have an existing Web application&lt;/li&gt;
	&lt;li&gt;You already use PubSubHubbub with another hub.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And here are a few reasons why you may want to &lt;strong&gt;avoid the PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Your endpoint (where you will receive notifications) is *behind a firewall&lt;/li&gt;
	&lt;li&gt;You want to receive a notification each time Superfeedr fetches and parses a feed for you&lt;/li&gt;
	&lt;li&gt;Your endpoint(s) are either desktop applications or embedded applications&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;What do I need to do?&lt;/h3&gt;
&lt;p&gt;The PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt; will allow you to receive notifications from us when we identify new entries in feeds to which you subscribed. Thus, there are 2 things that you need to do : &lt;em&gt;subscribe&lt;/em&gt; and &lt;em&gt;implement a &amp;#8220;receiver&amp;#8221; to deal with notifications&lt;/em&gt;.&lt;/p&gt;
&lt;h4&gt;Subscription&lt;/h4&gt;
&lt;p&gt;The subscription process is not obvious, because the hub needs to verify your intent. Here is how it works.&lt;br /&gt;
Our hub is located at &lt;a href="http://superfeedr.com/hubbub"&gt;http://superfeedr.com/hubbub&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;Send an &lt;strong&gt;authenticated&lt;/strong&gt; (with your superfeedr login/password) &lt;strong&gt;&lt;span class="caps"&gt;POST&lt;/span&gt; request&lt;/strong&gt; to our &lt;span class="caps"&gt;URL&lt;/span&gt; with the following parameters : &lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.mode&lt;/em&gt; = subscribe|unsubscribe&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.verify&lt;/em&gt; = sync&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.callback&lt;/em&gt; = http://domain.tld/your/callback&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.topic&lt;/em&gt; = http//feeds.you.want.to/subscribe&lt;/li&gt;
	&lt;li&gt;When our server receives this &lt;span class="caps"&gt;POST&lt;/span&gt; request, it will &lt;strong&gt;send back a &lt;span class="caps"&gt;GET&lt;/span&gt; request to your callback &lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/strong&gt;, with the following :&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.mode&lt;/em&gt; = subscribe|unsubscribe&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.topic&lt;/em&gt; = http//feeds.you.want.to/subscribe&lt;br /&gt;
    &amp;#8211; &lt;em&gt;hub.challenge&lt;/em&gt; = a-random-string&lt;/li&gt;
	&lt;li&gt;If your server &lt;strong&gt;echoes the hub.challenge&lt;/strong&gt; parameter (along with a 200 response), the &lt;strong&gt;subscription will be accepted&lt;/strong&gt;. It will be refused in any other case.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;To debug the process, you can use &lt;a href="http://hurl.r09.railsrumble.com/hurls/ea7a8a4fbc75d92497f6e1ce4f904cb5b4c04609/59aa8bca27078865519ded6c7c8d01023789348f"&gt;this hurl to send subscriptions requests&lt;/a&gt; (don&amp;#8217;t forget to adjust the values of the params, though). &lt;a href="http://curl.haxx.se/"&gt;Curl&lt;/a&gt; is another great option.&lt;/p&gt;
&lt;h4&gt;Receive Notifications&lt;/h4&gt;
&lt;p&gt;Your application must &amp;#8220;deal&amp;#8221; with the notifications. Notifications are &lt;span class="caps"&gt;POST&lt;/span&gt; requests sent to you callback &lt;span class="caps"&gt;URL&lt;/span&gt;, the new entries are in the request body. You then have to use an &lt;span class="caps"&gt;XML&lt;/span&gt; parser to fetch that body. Since we use standard &lt;span class="caps"&gt;ATOM&lt;/span&gt;, any parser that can deal with &lt;span class="caps"&gt;ATOM&lt;/span&gt; will be great.&lt;/p&gt;
&lt;p&gt;If you&amp;#8217;re using a web application framework like Rails, Django, Merb or Symfony, it should be quite easy to register a &amp;#8220;route&amp;#8221; connected to the right Controller, in charge of parsing this body.&lt;/p&gt;
&lt;h3&gt;Existing libraries and plugins&lt;/h3&gt;
&lt;p&gt;The great advantage about using a standard protocol, is that you can re-use any &amp;#8220;code&amp;#8221; that&amp;#8217;s been written for other hubs. Here is a small list of existing libraries that can help you deal with the subscriptions and handling notification from your web app. That should all be fairly easy to implement.&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;a href="http://github.com/empika/Superfeedr-PubSubHubbub-Rails-Plugin/tree/master"&gt;Empika&amp;#8217;s Rails plugin&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="https://git.participatoryculture.org/djpubsubhubbub/"&gt;Django App&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://github.com/igrigorik/PubSubHubbub/tree/master"&gt;Ilya&amp;#8217;s EventMachine Ruby daemon&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://code.google.com/p/pubsubhubbub/source/browse/trunk/subscriber_clients/php/subscriber.php"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt; subscriber Client&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://framework.zend.com/code/browse/Standard_Incubator/library/Zend/Feed/Pubsubhubbub"&gt;Zend Subscriber&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://hackage.haskell.org/package/pubsub-0.10"&gt;Haskell Client&lt;/a&gt;&lt;/li&gt;
	&lt;li&gt;&lt;a href="http://code.google.com/p/pubsubhubbub/source/browse/#svn/trunk/subscriber"&gt;Python Subscriber&lt;/a&gt;&lt;br /&gt;
&amp;#8230;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also find several &lt;a href="http://github.com/search?langOverride=&amp;amp;q=pubsubhubbub"&gt;PubSubHubbub repositories on github&lt;/a&gt;, some of them claim to implement the subscriber part of the protocol.&lt;/p&gt;
&lt;p&gt;Finally, please take the time to read our &lt;a href="http://superfeedr.com/documentation#pubsubhubbub"&gt;PubSubHubbub documentation&lt;/a&gt; as this blog post is just a &amp;#8220;getting started&amp;#8221; guide.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Real-time search</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="real-time" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="search" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="foo" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/29/real-time-search.html"/>
        <published>2009-08-29T00:00:00-07:00</published>
        <updated>2009-08-29T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/29/real-time-search</id>
        <content type="html">&lt;p&gt;Yes, I am pissed off I am not at &lt;a href="http://en.wikipedia.org/wiki/Foo_Camp"&gt;Foo Camp&lt;/a&gt;, but I am working to be there next year, bear with me. I really wish I could be there because I think we&amp;#8217;re making the term &amp;#8220;real-time web&amp;#8221; as the new &amp;#8220;web 2.0&amp;#8221; : a &lt;a href="http://twitter.com/plasticbagUK/status/3638809764"&gt;brand as Tom calls it&lt;/a&gt;. &lt;em&gt;&amp;#8220;Blahblah is doing real-time&amp;#8221;&lt;/em&gt;, &lt;em&gt;&amp;#8220;Blihblih has a real-time approach&amp;#8221;&lt;/em&gt;&amp;#8230; And this is bad : when words lose their meaning, concepts get over-looked. &lt;strong&gt;This is not just playing on words&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/Real-time_computing"&gt;Real-time is not instantaneity&lt;/a&gt;. &lt;strong&gt;Real-time means time-constrained&lt;/strong&gt;. That&amp;#8217;s it. That constraint can of course be low (up to the second if you want, even).&lt;/p&gt;
&lt;p&gt;Based on that, a real-time search engine would be a search engine that would be able to &lt;strong&gt;guarantee that the results of your query happened within an X seconds/minutes/hours/days&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If I search for &lt;a href="http://search.twitter.com/search?q=foo"&gt;&amp;#8216;Foo&amp;#8217; on twitter&lt;/a&gt;, Twitter tells me that the constraint is &amp;#8216;now&amp;#8217; (&lt;em&gt;See what&amp;#8217;s happening — right now.&lt;/em&gt;), I am guaranteed that the results have been posted &amp;#8216;now&amp;#8217; : I&amp;#8217;ll leave the now definition to Twitter :D.&lt;/p&gt;
&lt;p&gt;By studying a query over different time-constraints (within 1 year, 1 month, 1 day, 1 hour), we can probably get very interesting results : maybe something like the log of Google&amp;#8217;s &lt;a href="http://battellemedia.com/archives/000063.php"&gt;Database of Intentions&lt;/a&gt;. Applied to Twitter, that would allow us to &lt;em&gt;learn a lot on how we communicate, react to &amp;#8220;information&amp;#8221; and propagate it, or even correlation between things people are talking about&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Remember when Google &lt;a href="http://www.google.org/flutrends/"&gt;announced they could predict&lt;/a&gt; the &amp;#8220;flu trend&amp;#8221; better than the &lt;span class="caps"&gt;CDC&lt;/span&gt;? Well, my bet is that &lt;strong&gt;Twitter can do that even better than Google&lt;/strong&gt;, and for maybe less &amp;#8220;common&amp;#8221; things. A real-time search on &lt;a href="http://search.twitter.com/search?q=heading"&gt;heading&lt;/a&gt; into Twitter, coupled with a hint of geo-localisation and a pinch of semantic analysis would probably be quite powerful to know (and predict) what the traffic looked like at a given place, on a given time.&lt;/p&gt;
&lt;p&gt;Want to predict the &amp;#8220;economy&amp;#8221;? Track down keywords like &amp;#8220;laid off/let go&amp;#8221;, &amp;#8220;hired&amp;#8221;, &amp;#8220;profit&amp;#8221;, &amp;#8220;loss&amp;#8221;, &amp;#8220;chapter 11&amp;#8221;&amp;#8230;&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>A new Architecture</title>
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="architecture" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/25/simpler-architecture.html"/>
        <published>2009-08-25T00:00:00-07:00</published>
        <updated>2009-08-25T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/25/simpler-architecture</id>
        <content type="html">&lt;p&gt;No post for almost 2 weeks : we&amp;#8217;ve been incredibly busy. We had a lot of instability in the past 10 days, in conjonction (but not related) to significant &lt;a href="/api/pubsubhubbub/xmpp/API-changes/"&gt;&lt;span class="caps"&gt;API&lt;/span&gt; changes&lt;/a&gt;. We&amp;#8217;d like to apologize for the few times when you had problems accessing our service. We&amp;#8217;ve done our best to limit these downtime periods and most of the time they only affected subscription/unsubscriptions : &lt;strong&gt;notifications were still going on, as usual&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In that period, the number of feeds in our system increased by 50%, most of them through the &lt;a href="http://superfeedr.com/hubbub"&gt;PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt;. This significant growth in the &lt;span class="caps"&gt;HTTP&lt;/span&gt; traffic made light on the weaknesses of our &lt;span class="caps"&gt;HTTP&lt;/span&gt; architecture. The &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; had a direct access to the MySQL database. &lt;em&gt;This was quite bad design from us, as both the &lt;span class="caps"&gt;XMPP&lt;/span&gt; and &lt;span class="caps"&gt;HTTP&lt;/span&gt; were accessing this database and basically doing the same thing : subscribing and unsubscribing users to feeds&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;As I am a true &lt;a href="http://bit.ly/3lJOzV"&gt;&lt;span class="caps"&gt;DRY&lt;/span&gt;&lt;/a&gt; lover, I just hated the fact that we had to create and maintain 2 components doing exactly the same thing and I&amp;#8217;ve been looking for ways to change that.&lt;/p&gt;
&lt;p&gt;Here is how our architecture looked like until this morning:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/before.png" alt="" /&gt;&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The &lt;span class="caps"&gt;XMPP&lt;/span&gt; App would deal with all subscriptions and unsubscriptions, as well as notifications from users using the &lt;span class="caps"&gt;XMPP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. Nothing changed there.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;The Web app would do the same with both the website (you can add/remove feeds through our website) and the PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt;. It was a plain vanilla Rails application.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;It was simple to understand, but not so clean and probably not very easy to maintain, since we have so much duplicate information. I was also &amp;#8220;scared&amp;#8221; by the scaling issues we might have had to face on both sides, but I knew that our &lt;span class="caps"&gt;XMPP&lt;/span&gt; app can scale pretty easily as &lt;a href="http://xmpp.org/extensions/xep-0114.html"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt; components&lt;/a&gt; are load balanced by default by &lt;a href="http://www.ejabberd.im/"&gt;EJabberd&lt;/a&gt;, which means that we can scale horizontally in a mater of minutes (&lt;a href="http://blog.superfeedr.com/chef/configuration/deployment/infrastructure/scale-with-chef/"&gt;Chef is great&lt;/a&gt;!).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is how it looks like now:&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/after.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;At first sight it looks more complex, and you&amp;#8217;re probably right, but it&amp;#8217;s also more coherent and much much much dryer. What changed? Basically, &lt;strong&gt;both the web app and the PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt; became &lt;span class="caps"&gt;XMPP&lt;/span&gt; clients&lt;/strong&gt;, as they now both access the &lt;span class="caps"&gt;XMPP&lt;/span&gt; App to add/remove/list subscriptions. In both cases, this is &lt;a href="http://xmpp.org/extensions/xep-0206.html"&gt;&lt;span class="caps"&gt;BOSH&lt;/span&gt;&lt;/a&gt; magic.&lt;/p&gt;
&lt;p&gt;Bosh is and &lt;span class="caps"&gt;HTTP&lt;/span&gt; extension that allows bi-directional streams &amp;#8211; very much like &lt;a href="http://blog.leahculver.com/2009/07/a-is-for-ajax-and-c-is-for-comet.html"&gt;comet&lt;/a&gt; -. &lt;span class="caps"&gt;XMPP&lt;/span&gt; has a &lt;span class="caps"&gt;BOSH&lt;/span&gt; extension, that has been implemented in eJabberd. Once you&amp;#8217;ve got this stream, &lt;em&gt;it&amp;#8217;s pretty easy to transmit &lt;span class="caps"&gt;XMPP&lt;/span&gt; traffic over &lt;span class="caps"&gt;HTTP&lt;/span&gt;&lt;/em&gt;. A key feature is that these connection are &amp;#8220;stored&amp;#8221; on the &lt;span class="caps"&gt;HTTP&lt;/span&gt; side of the &lt;span class="caps"&gt;XMPP&lt;/span&gt; server. It means that as long as your client remembers the session id of this stream, you can re-connect to the &lt;span class="caps"&gt;XMPP&lt;/span&gt; server and take the connection where it was left.&lt;/p&gt;
&lt;h4&gt;The web app : Strophe&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://code.stanziq.com/strophe/"&gt;Strophe&lt;/a&gt; is a very well done Javascript library for &lt;span class="caps"&gt;XMPP&lt;/span&gt;. My friend &lt;a href="http://metajack.im/"&gt;Jack&lt;/a&gt; wrote it and it&amp;#8217;s awesome. Among its key advantages : a simple syntax, very close to &lt;a href="http://jquery.com/"&gt;Jquery&lt;/a&gt;, and an &amp;#8220;attach&amp;#8221; feature that allows the application server (Rails in our case), to start the &lt;span class="caps"&gt;BOSH&lt;/span&gt; stream and then hand it over to Javascript so that user credentials are never sent back to the client. That is exactly what we used for the web application. You can now list, unsubscribe, and subscribe to feeds through a simple interface that uses our &lt;span class="caps"&gt;XMPP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. How cool is that?&lt;/p&gt;
&lt;h4&gt;PubSubHubbub : Proxying&lt;/h4&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/pubsubhubbub/"&gt;PubSubHubbub&lt;/a&gt; is an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;. That was a little trickier, because obviously, running javascript on the server side doesn&amp;#8217;t make much sense. However, like any &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;, we can of course &amp;#8220;proxy&amp;#8221; it from Rails. That is what we did. &lt;br /&gt;
Here is what happens when you subscribe or unsubscribe with the PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt; :&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;&lt;strong&gt;on the server&lt;/strong&gt;, it starts an &lt;span class="caps"&gt;XMPP&lt;/span&gt; Bosh session with your credentials&lt;/li&gt;
	&lt;li&gt;it sends the corresponding &lt;span class="caps"&gt;XMPP&lt;/span&gt; query,&lt;/li&gt;
	&lt;li&gt;it translate the &lt;span class="caps"&gt;XMPP&lt;/span&gt; response&lt;/li&gt;
	&lt;li&gt;it returns it to you as an &lt;span class="caps"&gt;HTTP&lt;/span&gt; response.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Of course, there is a performance cost to that, but it&amp;#8217;s not that big, as our &lt;span class="caps"&gt;HTTP&lt;/span&gt; server is &amp;quot;geographically&amp;quot;&amp;quot; very close to the &lt;span class="caps"&gt;XMPP&lt;/span&gt; app. Also, at the first PubSubHubbub query that you make, we store the connection into a &lt;a href="http://www.danga.com/memcached/"&gt;Memcached&lt;/a&gt; server, which allows faster processing on the following requests. In terms of results, we can server any PubSubHubbub query in something like 200ms to 500ms. It is slow, but don&amp;#8217;t forget that we also &lt;a href="http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.1.html#verifysub"&gt;check acceptance of the subscription/unsusbcription&lt;/a&gt; (by sending an &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;GET&lt;/span&gt; request) on your side, and that accounts for the biggest part of that time, actually.&lt;/p&gt;
&lt;p&gt;We &lt;a href="http://blog.superfeedr.com/dev/gospel/web-apps/the-future-of-web-apps/"&gt;wrote it earlier&lt;/a&gt;, but we&amp;#8217;re true believers in the fact that web apps are about to see a massive shift in their architecture, and we think that &lt;span class="caps"&gt;XMPP&lt;/span&gt; based apps, where the browser is just an &lt;span class="caps"&gt;XMPP&lt;/span&gt; client are going to be a significant part of that trend. We hope &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; will be an example that parents will show their kids, when they teach them about web apps ;) (Other cool examples include &lt;a href="http://collecta.com/"&gt;Collecta&lt;/a&gt; or &lt;a href="https://presentlyapp.com/"&gt;Present.ly&lt;/a&gt; &amp;#8230;)&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>API changes</title>
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/08/API-changes.html"/>
        <published>2009-08-08T00:00:00-07:00</published>
        <updated>2009-08-08T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/08/API-changes</id>
        <content type="html">&lt;p&gt;With more and more users, we get more and more feedback and we&amp;#8217;re slowly but surely improving our service to take into account all that feedback. As a consequence, every once in a while we need to push a new codebase with slight changes in the &lt;span class="caps"&gt;API&lt;/span&gt;. Hopefully these changes should be &lt;a href="http://en.wikipedia.org/wiki/Backward_compatibility"&gt;backward compatible&lt;/a&gt;, which means &lt;strong&gt;they shouldn&amp;#8217;t affect any of the existing applications&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;This changes will be &lt;strong&gt;released on, or after August 15&lt;/strong&gt;.&lt;/p&gt;
&lt;h3&gt;Subscription &lt;span class="caps"&gt;API&lt;/span&gt; changes&lt;/h3&gt;
&lt;p&gt;Up until now, subscription &lt;em&gt;end-points where &amp;#8220;user-centric&amp;#8221;&lt;/em&gt; which means that you could only have one &lt;span class="caps"&gt;JID&lt;/span&gt; or one web-hook for all the user&amp;#8217;s subscriptions. &lt;strong&gt;From now on, you will be able to have a specific endpoint for each subscription&lt;/strong&gt; :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;A different &lt;span class="caps"&gt;URL&lt;/span&gt; for each of your PubSubHubbub subscriptions&lt;/strong&gt;. Technically, this means that Superfeedr will implement the full specification, including the &lt;a href="http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.1.html#anchor5"&gt;subscription verification&lt;/a&gt;. That requires a little bit more work on the subscriber side, but it also gives you more flexibility with different &lt;span class="caps"&gt;URL&lt;/span&gt; for different &amp;#8220;types&amp;#8221; of feeds, or even a simple load-balancing on the subscriber side.&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;A different &lt;span class="caps"&gt;JID&lt;/span&gt; for each of your &lt;span class="caps"&gt;XMPP&lt;/span&gt; subscriptions&lt;/strong&gt;, as long as the subscription &lt;span class="caps"&gt;JID&lt;/span&gt; matches the IQ jid. If the IQ jid (in the &amp;#8220;from&amp;#8221; attribute) is:
	&lt;ul&gt;
		&lt;li&gt;a regular &lt;span class="caps"&gt;JID&lt;/span&gt;, like &lt;em&gt;user@server.tld&lt;/em&gt;, you will only be able to subscribe with &lt;em&gt;user@server.tld&lt;/em&gt;&lt;/li&gt;
		&lt;li&gt;a &amp;#8220;component jid&amp;#8221; like &lt;em&gt;component.server.tld&lt;/em&gt;, you will be able to subscribe with &lt;em&gt;any-user@component.server.tld&lt;/em&gt;.&lt;/li&gt;
	&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a consequence you&amp;#8217;ll be able to have both PubSubHubbub and &lt;span class="caps"&gt;XMPP&lt;/span&gt;/PubSub notifications, even for the same feeds. But, don&amp;#8217;t forget : we charge by the notification : 2 subscriptions to the same feed with different endpoints means you will be charged twice for the 2 notifications.&lt;/p&gt;
&lt;p&gt;By default, for all the subscriptions prior to this change, we will use by default your user-defined endpoint.&lt;/p&gt;
&lt;h3&gt;Subscriptions listing changes&lt;/h3&gt;
&lt;p&gt;This is only valid for the &lt;span class="caps"&gt;XMPP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt; since the PubSubHubbub doesn&amp;#8217;t define any subscription listing &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;br /&gt;
We will send status information along with the feeds, like in this example :&lt;br /&gt;
&lt;script src="http://gist.github.com/164251.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Similarly, you will receive the feed information upon subscription with the &lt;span class="caps"&gt;XMPP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Please, note that, contrary to notifications, the &amp;lt;status&amp;gt; will not include a feed attribute, as the feed url is already included in the &amp;lt;subscription&amp;gt; node attribute.&lt;/p&gt;
&lt;p&gt;We appreciate your feedback and are committed to implement as much as we can in a non-destructive way to avoid any compatibility issue. Please, if you see problem in any of your apps, do not hesitate to get in touch with us and we will shortly find a solution.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Performance monitoring with collectd</title>
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="open-source" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="infrastructure" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="collectd" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/07/performance-monitoring-with-collectd.html"/>
        <published>2009-08-07T00:00:00-07:00</published>
        <updated>2009-08-07T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/07/performance-monitoring-with-collectd</id>
        <content type="html">&lt;p&gt;One challenge we face when working in the Cloud is knowing &lt;strong&gt;when to &lt;a href="http://blog.superfeedr.com/chef/configuration/deployment/infrastructure/scale-with-chef/"&gt;scale up&lt;/a&gt;.&lt;/strong&gt; That means we need some obvious figures telling us we need more resources.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/collectd.png" style="float: right; margin: 5px;" alt="" /&gt; This requires performance monitoring. From the many tools around we chose &lt;a href="http://collectd.org/"&gt;collectd&lt;/a&gt;. This daemon is built on a very sleek plugin infrastructure, allowing it to run with only the functionality you actually need. If you want to know how clean C looks the collectd source code is worth a look.&lt;/p&gt;
&lt;p&gt;Contrary to a lot of other monitoring software, the watched hosts don&amp;#8217;t have listening network sockets but &lt;strong&gt;only send &lt;span class="caps"&gt;UDP&lt;/span&gt; packets&lt;/strong&gt; to a central server. It&amp;#8217;s not necessary to control any data gathering from the outside, thus it avoids potential remote security holes.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/collectd-mem.png" style="float:left; margin: 10px;" alt="" /&gt; The primary use of collectd is &lt;strong&gt;monitoring of operating system resources&lt;/strong&gt; and this is done very efficiently by its native plugins. There&amp;#8217;s no expensive &lt;code&gt;fork()&lt;/code&gt; for calling other programs. If you still need that, there&amp;#8217;s a &lt;a href="http://collectd.org/documentation/manpages/collectd-exec.5.shtml"&gt;exec&lt;/a&gt; plugin for that.&lt;/p&gt;
&lt;p&gt;Once you figured out which host is responsible for gathering all the data, you can configure collectd&amp;#8217;s &lt;a href="http://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_network"&gt;network plugin&lt;/a&gt; to open a listening socket for receiving other hosts&amp;#8217; statistics.&lt;/p&gt;
&lt;p&gt;To make use of the collected data you&amp;#8217;ve got the &lt;a href="http://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_rrdtool"&gt;rrdtool plugin&lt;/a&gt; which writes locally-generated or remotely-received values into the round-robin database files of the popular and proven &lt;a href="http://oss.oetiker.ch/rrdtool/"&gt;rrdtool&lt;/a&gt;. Pay attention to the configuration of that plugin: once you start monitoring dozens of hosts with hundreds of plugins, rrdtool will randomly write to the many &lt;span class="caps"&gt;RRD&lt;/span&gt; files. There are some tunable parameters and the &lt;a href="http://collectd.org/documentation/manpages/collectd.conf.5.shtml#plugin_rrdcached"&gt;rrdcached&lt;/a&gt; solution.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/collectd-superparsr.png" style="float:right; margin: 10px;" alt="" /&gt; You can generate your pretty graphs with the &lt;strong&gt;rrdgraph&lt;/strong&gt; utility. This is being done by the included &lt;strong&gt;collection3&lt;/strong&gt; &lt;span class="caps"&gt;CGI&lt;/span&gt; scripts. Unfortunately, this web interface is rather Web 1.0 and allows basic browsing of your graphs only. We hope for the advent of some alternative projects to allow more convenient viewing of statistics.&lt;/p&gt;
&lt;p&gt;Because we do not only want to watch host resources but also the quality of our processes we have developed the &lt;a href="http://github.com/astro/ruby-collectd/"&gt;ruby-collectd&lt;/a&gt; library. Basically, you just define a collectd server on application startup and sprinkle your code with statements like &lt;code&gt;Stats.counter(:job_done).count! 1&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;ruby-collectd does not require collectd, so you don&amp;#8217;t need to install it locally just for watching your own application.&lt;/p&gt;</content>
        <author>
            <name>Astro</name>
            <uri>http://identi.ca/astro</uri>
        </author>
    </entry>
    
    <entry>
        <title>Harper's friends</title>
        
        <category term="use-case" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="friends" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="harper" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/05/harper-s-friends.html"/>
        <published>2009-08-05T00:00:00-07:00</published>
        <updated>2009-08-05T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/05/harper-s-friends</id>
        <content type="html">&lt;p&gt;There is &lt;strong&gt;already a lot of fun stuff&lt;/strong&gt; that people are doing with &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; and we thought it would be interesting to share them here. Of course, if you have any story, you can either write it on your blog and we&amp;#8217;ll link to it (on &lt;a href="http://twitter.com/superfeedr"&gt;twitter&lt;/a&gt; or here), or you can send it by email and we will be more than happy to post it on this &lt;a href="http://blog.superfeedr.com"&gt;blog&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;&lt;a href="http://twitter.com/harper"&gt;Harper&lt;/a&gt; was among our very first users, and even though he told be he was interested by &lt;span class="caps"&gt;XMPP&lt;/span&gt;, it seems that he fell in love with &lt;a href="http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub/"&gt;PubSubHubbub&lt;/a&gt;. Over the course of last week end he created a small app called &lt;a href="http://www.harpersfriends.com/"&gt;Harper&amp;#8217;s friends&lt;/a&gt; (Oh Yeah!) which basically aggregates the content of his friends &lt;a href="http://www.harpersfriends.com/tweets/"&gt;twits&lt;/a&gt;, &lt;a href="http://www.harpersfriends.com/photos/"&gt;pictures&lt;/a&gt; and &lt;a href="http://www.harpersfriends.com/blogs/"&gt;blog posts&lt;/a&gt; on a page. You can also show items by users or by type, like a standalone &lt;a href="http://friendfeed.com"&gt;friendfeed&lt;/a&gt; if you want.&lt;/p&gt;
&lt;p&gt;All the polling content is done via Superfeedr and he uses the &lt;a href="http://superfeedr.com/hubbub"&gt;PubSubHubbub &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; to notify an &lt;a href="http://code.google.com/appengine/"&gt;AppEngine&lt;/a&gt; app. I guess the fact that you can&amp;#8217;t run &lt;span class="caps"&gt;XMPP&lt;/span&gt; apps on appengine (&lt;a href="http://googleappengine.blogspot.com/2009/02/roadmap-update.html"&gt;yet&lt;/a&gt;) was one of the reasons he chose the web based &lt;span class="caps"&gt;API&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;One of the key reasons to use Superfeedr is that you don&amp;#8217;t have to deal with (or even care about) &lt;em&gt;building a polling infrastructure&lt;/em&gt;. Believe it or not, but I can bet Harper would have spent easily 2 or 3 times the time he spent if he had to implement that, and he would probably not have had the same kind of results that we have (probably because that would be overkill).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Focus on what you do best and we will focus on what we do best&lt;/strong&gt;. This way, the world will be awesome.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Scale with Chef</title>
        
        <category term="chef" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="deployment" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="infrastructure" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="configuration" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/08/02/scale-with-chef.html"/>
        <published>2009-08-02T00:00:00-07:00</published>
        <updated>2009-08-02T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/08/02/scale-with-chef</id>
        <content type="html">&lt;p&gt;This will be a long post, but it deserves some time. Go get a glass of water, breathe deeply and let&amp;#8217;s dive!&lt;/p&gt;
&lt;h3&gt;The why?&lt;/h3&gt;
&lt;p&gt;Even though we use &amp;#8220;smart&amp;#8221; techniques to get content from the feeds in real-time (or close), we still need to do some polling (remember, &lt;a href="http://blog.superfeedr.com/gospel/something-stupid/"&gt;we&amp;#8217;re doing something stupid, so that you don&amp;#8217;t have to&lt;/a&gt;). To achieve that, we have a distributed architecture where workers can ask dispatchers for feeds to parse.&lt;/p&gt;
&lt;p&gt;From there it is somehow easy to scale : &lt;strong&gt;more feeds to fetch? add more workers&lt;/strong&gt;. We&amp;#8217;re building a system that, at any given time knows how many workers are (and will be) needed. Once we know that, we just have to fire off some new workers (or kill unneeded ones), and we need this to happen in something like 5 minutes.&lt;/p&gt;
&lt;h3&gt;Theory&lt;/h3&gt;
&lt;p&gt;You should really check out this &lt;del&gt;long&lt;/del&gt; presentation from &lt;a href="http://brainspl.at"&gt;Ezra&lt;/a&gt; and &lt;a href="http://twitter.com/adamhjk"&gt;Adam&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;embed src="http://blip.tv/play/AYGMpxGLqzQ" type="application/x-shockwave-flash" width="480" height="290" allowscriptaccess="always" allowfullscreen="true"&gt;&lt;/embed&gt;&lt;/p&gt;
&lt;p&gt;They say that &lt;em&gt;scaling usually has 3 steps&lt;/em&gt; :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;&lt;strong&gt;bootstrapping&lt;/strong&gt; : it is the act of &amp;#8216;acquiring&amp;#8217; resources. Basically starting servers at a given IP, with a base (naked OS), and hopefully a way to connect (ssh).&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;configuration&lt;/strong&gt; : the goal here is to change a &amp;#8220;vanilla&amp;#8221; server into something operational.&lt;/li&gt;
	&lt;li&gt;&lt;strong&gt;command and control&lt;/strong&gt; : once the server is configured and running, you still need to send him specific instructions and have feedback on how it performs.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There are several options for the configuration. The most basic one is to &lt;em&gt;do everything by hand&lt;/em&gt; (and try to repeat for as many servers you need to deploy). Another one is to &lt;em&gt;deal with an &amp;#8220;image&amp;#8221;&lt;/em&gt; (a ghost if you want), but then it&amp;#8217;s quite hard to improve it and evolve it. At &lt;a href="http://superfeedr.com"&gt;superfeedr&lt;/a&gt;, the option we chose is to use &lt;a href="http://wiki.opscode.com/display/chef/Home"&gt;Chef&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Chef&lt;/h3&gt;
&lt;p&gt;Chef allows you to define a set of &lt;strong&gt;specifications&lt;/strong&gt; (packages to be installed, files to de deployed, options to be configured&amp;#8230;) of what our server should like when it&amp;#8217;s ready. There are a few advantages to that : it&amp;#8217;s &lt;em&gt;stateless&lt;/em&gt;, it is &lt;em&gt;idempotent&lt;/em&gt;, it is &lt;em&gt;repeatable&lt;/em&gt;&amp;#8230; etc.&lt;/p&gt;
&lt;p&gt;There are a lot of ways to use Chef. Here is &lt;strong&gt;ours&lt;/strong&gt;. It&amp;#8217;s probably &lt;em&gt;not the best for everyone&lt;/em&gt; (and maybe not even for us), but playing with it gave us some experience and we&amp;#8217;re sharing it with you.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/en/thumb/8/82/Chef.svg/350px-Chef.svg.png" style="width: 30%; float:left; margin: 5px;" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;Chef is a &lt;strong&gt;client-server architecture&lt;/strong&gt;, where the client is the node to be configured, which implies several things. The first one (and most impacting) is that &lt;strong&gt;everything happens from the client&lt;/strong&gt; (called node). If you used to do your configurations by hand (or using scripts), you were not doing it from the client. Another consequence is that you need to have your clients to be &amp;#8216;chef-ready&amp;#8217;. This might (and will) sound weird, but &lt;em&gt;you need to have some basic configuration on your servers before you can start to do the actual configuration&lt;/em&gt;. Luckily this configuration is rather basic and can be automated by using a script &lt;a href="http://gist.github.com/160263"&gt;like this one&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;Cookbooks&lt;/h4&gt;
&lt;p&gt;On the chef server, you would define a set of &lt;strong&gt;cookbooks&lt;/strong&gt;. Cookbooks are &lt;strong&gt;collections of related recipes&lt;/strong&gt;. For example, a cookbook can deal with installing the &amp;#8220;build-essentials&amp;#8221; packages, the apache server or git&amp;#8230; etc. For each cookbook, you would have a set of recipes. For example, the git cookbook, may have recipes such as : install client and install server.&lt;/p&gt;
&lt;p&gt;Technically the cookbooks can be used by different users and/or for different machines in your architecture. Actually, you &lt;strong&gt;want&lt;/strong&gt; them to be as generic as they can.&lt;/p&gt;
&lt;h4&gt;Roles&lt;/h4&gt;
&lt;p&gt;Once you have your cookbooks, you should define &lt;strong&gt;roles&lt;/strong&gt;. A role is a &amp;#8220;type&amp;#8221; of node you&amp;#8217;d like to configure. Technically, roles are just sets of cookbooks. A role for a blog application would include recipes for Apache, MySQL, and Wordpress for example. A Rails application may have an &amp;#8220;MySQL server&amp;#8221; role, a &amp;#8220;Memcached server&amp;#8221; role, and a Web application role.&lt;/p&gt;
&lt;h4&gt;Attributes&lt;/h4&gt;
&lt;p&gt;To differentiate a cookbook for 2 nodes, Chef has &lt;strong&gt;attributes&lt;/strong&gt;. An attribute would be for example the name of your server, or the port used by apache, the names of the gems you want to install, the user who runs your apache server&amp;#8230; etc. Of course, you can define attributes at several levels : inside a cookbook, they would be the default values, or at the &amp;#8220;role&amp;#8221; level and even, at the node level. For example, a node IP is clearly at the node level, but the login/password to an external MySQL database can be set at the role level, while the apache cookbook should probably set the default http port to 80.&lt;/p&gt;
&lt;p&gt;Got it? Of course, this clearly a &amp;#8220;crash-course&amp;#8221;, you can find a lot more information in the &lt;a href="http://wiki.opscode.com/display/chef/Home"&gt;Opscode wiki&lt;/a&gt;, as well as in the &lt;a href="irc://irc.freenode.net/chef"&gt;#chef room at irc.freenode.net&lt;/a&gt;. Ezra also wrote a &lt;a href="http://brainspl.at/articles/2009/01/31/cooking-with-chef-101"&gt;great blog post&lt;/a&gt; that you should read as well.&lt;/p&gt;
&lt;h3&gt;Where to start?&lt;/h3&gt;
&lt;ol&gt;
	&lt;li&gt;I&amp;#8217;d start &lt;strong&gt;first with setting up a Chef Server&lt;/strong&gt;. The Chef server will provide you with a few things, including a web application that can be used to see all your cookbooks, roles, and nodes at a glance.&lt;/li&gt;
	&lt;li&gt;Once that&amp;#8217;s done, &lt;strong&gt;setup a chef repository&lt;/strong&gt;, that would basically contain the code of your cookbooks. Then, add a few cookbooks, define a first role and assign it some recipes, as well as attributes. Writing cookbooks shouldn&amp;#8217;t be too hard, but you should first try to see if someone has written one. Check &lt;a href="http://github.com/opscode/chef/tree/master"&gt;opscode repository&lt;/a&gt; and all the &lt;a href="http://github.com/opscode/chef/network"&gt;associated branches&lt;/a&gt;. With a little luck, &lt;strong&gt;you won&amp;#8217;t have to write anything but define attributes&lt;/strong&gt;. &lt;br /&gt;
When you have a few cookbooks, clone that chef repo on your chef server and run &lt;code&gt;rake deploy&lt;/code&gt; anytime you want to update the configuration.&lt;/li&gt;
	&lt;li&gt;Then, create a bootstrap script, &lt;a href="http://gist.github.com/160263"&gt;like this one&lt;/a&gt;, which installs the bricks for a chef client on your node.&lt;/li&gt;
	&lt;li&gt;Finally, start a new node on your favorite cloud provider (Slicehost:&amp;#8220;http://slicehost.com&amp;#8221;, &lt;a href="http://linode.com"&gt;Linode&lt;/a&gt;, &lt;a href="http://aws.amazon.com/ec2/"&gt;EC2&lt;/a&gt;), copy the boostrap (&lt;code&gt;scp&lt;/code&gt; should make it) script and run it.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The great thing with this &amp;#8220;spec&amp;#8221; approach is that you can (and should) kill instances all the time and re-configure clean ones in minutes.&lt;/p&gt;
&lt;p&gt;Hosting in the cloud really means that &lt;strong&gt;you don&amp;#8217;t know (or at least shouldn&amp;#8217;t care) about the nodes&lt;/strong&gt; on which your app is running.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ve heard people like &lt;a href="http://37signals.com/"&gt;37signals&lt;/a&gt;, &lt;a href="http://www.engineyard.com/"&gt;EngineYard&lt;/a&gt; or even &lt;a href="http://twitter.com"&gt;Twitter&lt;/a&gt; are using Chef to scale and deploy their architectures, that can only be a good sign ;)&lt;/p&gt;
&lt;p&gt;Again, this was a very light intro, but, when we started to play with Chef, we found that resources (and feedback) were missing.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Superfeedr Java Wrapper</title>
        
        <category term="API" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Java" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="XMPP" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="wrappers" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/28/java-wrapper.html"/>
        <published>2009-07-28T00:00:00-07:00</published>
        <updated>2009-07-28T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/28/java-wrapper</id>
        <content type="html">&lt;p&gt;This seems to be the wrapper week! Our friend &lt;a href="http://twitter.com/mastooo"&gt;Thomas&lt;/a&gt; just pushed a first version of a &lt;a href="http://github.com/superfeedr/superfeedr-java/tree/master"&gt;Java wrapper&lt;/a&gt; to our &lt;span class="caps"&gt;API&lt;/span&gt; (&lt;a href="http://github.com/mastooo/java-superfeedr/tree/master"&gt;his branch&lt;/a&gt;). I&amp;#8217;d like to take this as an occasion to explain how we see these wrappers.&lt;/p&gt;
&lt;p&gt;We &lt;strong&gt;know our limits&lt;/strong&gt; and we know we can&amp;#8217;t actively support wrappers in all languages. Like everybody, we have our favorite languages and platform, and there is little chance that we ever get a deep enough knownledge in all that languages that you guys use to offer great services. So, for us, &lt;em&gt;the limit of what we can provide and support is our &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/em&gt; (both &lt;span class="caps"&gt;XMPP&lt;/span&gt; and PubSubHubbub).&lt;/p&gt;
&lt;p&gt;However, we&amp;#8217;re not blind either and we know how &lt;strong&gt;these parsers are important&lt;/strong&gt; for everybody to get started and integrate Superfeedr into their existing apps, so we take great care of them and try to help people use them or fix problems. &lt;a href="http://twitter.com/aneilbaboo"&gt;Aneil&lt;/a&gt; helped us a lot on the &lt;a href="http://github.com/superfeedr/supeefeedr-python/tree/master"&gt;Python lib&lt;/a&gt;, &lt;a href="http://nathan.fritzclan.com/"&gt;Nathan&lt;/a&gt;, &lt;a href="http://blog.cyberion.net/"&gt;Yann&lt;/a&gt; or &lt;a href="http://twitter.com/mastooo"&gt;Thomas&lt;/a&gt; did an awesome job with the &lt;a href="http://github.com/superfeedr/supeefeedr-php/tree"&gt;&lt;span class="caps"&gt;PHP&lt;/span&gt;&lt;/a&gt;, &lt;a href="http://github.com/superfeedr/superfeedr-perl/tree"&gt;Perl&lt;/a&gt; and &lt;a href="http://github.com/superfeedr/superfeedr-java/tree"&gt;Java&lt;/a&gt; libs; all of which we would have been unable to make.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;These libs are not ours&lt;/strong&gt;, &lt;em&gt;they wait for your input_, y_our documentation, your testing&lt;/em&gt;, as well as your &lt;em&gt;suggestions for new features&lt;/em&gt;. We will just help &amp;#8220;gathering&amp;#8221; them and keeping track by &amp;#8220;connecting&amp;#8221; the people who made them with the people who use them.&lt;/p&gt;
&lt;p&gt;Again, &lt;strong&gt;thank you Nathan, Yann, Thomas, Aneil&lt;/strong&gt;!&lt;/p&gt;
&lt;p&gt;PS: anybody for the C# one? ;) (find &lt;a href="http://github.com/superfeedr"&gt;them all here&lt;/a&gt;)&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>A Perl Wrapper</title>
        
        <category term="API" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Perl" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="XMPP" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/26/a-perl-wrapper.html"/>
        <published>2009-07-26T00:00:00-07:00</published>
        <updated>2009-07-26T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/26/a-perl-wrapper</id>
        <content type="html">&lt;p&gt;Thanks to our friend &lt;a href="http://blog.cyberion.net/"&gt;Yann&lt;/a&gt;, we now have a &lt;a href="http://github.com/superfeedr/superfeedr-perl/tree/master"&gt;Perl wrapper for the Superfeedr &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; (here is &lt;a href="http://github.com/yannk/perl-anyevent-superfeedr/tree/master"&gt;yann&amp;#8217;s repo&lt;/a&gt; if you want faster updates).&lt;/p&gt;
&lt;p&gt;&lt;img src="http://http.cdnlayer.com/itke/blogs.dir/8/files/2008/02/perl.jpg" style="float:left; width: 30%; margin: 10px;" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;What I like with Yann&amp;#8217;s wrapper is that it has a &lt;em&gt;callback&lt;/em&gt; that users can implement to return the new feeds to &lt;em&gt;subscribe to in a asynchronous fashion&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;So, for example, when you need to add a feed to superfeedr, you can save it in your database, and then, implement the callback so that it returns that feed. Any feed that will be returned will be subscribed to. One of the great advantages is that it shouldn&amp;#8217;t affect your service performance, since the subscription is then asynchronous.&lt;/p&gt;
&lt;p&gt;Yann will soon put that &lt;a href="http://search.cpan.org/perldoc?AnyEvent::Superfeedr"&gt;wrapper on &lt;span class="caps"&gt;CPAN&lt;/span&gt;&lt;/a&gt; (not yet there, though), but as with any of our other wrappers, &lt;strong&gt;you can of course fork it and improve it (or add doc, tests, examples)&lt;/strong&gt; ;)&lt;/p&gt;
&lt;p&gt;PS: You need to use &lt;a href="http://github.com/yannk/perl-anyevent-xmpp/"&gt;his version of AnyEvent::&lt;span class="caps"&gt;XMPP&lt;/span&gt;&lt;/a&gt; to fix a &lt;a href="http://github.com/yannk/perl-anyevent-xmpp/commit/dff1b3a3addf0cf44eb0c023990c4ef9fec3ddbd"&gt;weird defect&lt;/a&gt; in the way this lib handles xmpp-urls.&lt;/p&gt;
&lt;p&gt;Thank you &lt;a href="http://blog.cyberion.net/"&gt;Yann&lt;/a&gt; ! We owe you dinner!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Make Our Logo!</title>
        
        <category term="logo" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="open-source" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/25/make-our-logo.html"/>
        <published>2009-07-25T00:00:00-07:00</published>
        <updated>2009-07-25T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/25/make-our-logo</id>
        <content type="html">&lt;p&gt;A lot of &lt;a href="http://twitter.com/lauragatning/status/2181168813"&gt;our friends complained&lt;/a&gt; about the fact that we didn&amp;#8217;t have a logo. That&amp;#8217;s a valid concern, but I really didn&amp;#8217;t have the skills (even far from it) that it takes. So what I basically asked a very &lt;a href="http://www.lafraise.com/User/profile/id/660804"&gt;talented friend&lt;/a&gt; to make a concept. He did a great job and you can see it right below, with several different colors.&lt;/p&gt;
&lt;p&gt;I am releasing it here because I know some of you might have great ideas to actually make it even nicer, and well, I&amp;#8217;d love to be able to have feedback and improvements from our actual users.&lt;/p&gt;
&lt;p&gt;&lt;a href="/images/logos/logos.jpg"&gt;&lt;img src="/images/logos/logos.jpg" style="width:90%;" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Here a few words that represent what the logo should convey : &lt;em&gt;superhero, &lt;span class="caps"&gt;RSS&lt;/span&gt;, speed, cloud, reliability, strength, seriousness&lt;/em&gt;&amp;#8230; Do you see others?&lt;/p&gt;
&lt;p&gt;Here are 3 versions of the same logo : &lt;a href="/images/logos/superfeedr.ai"&gt;AI&lt;/a&gt;, &lt;a href="/images/logos/superfeedr.eps"&gt;&lt;span class="caps"&gt;EPS&lt;/span&gt;&lt;/a&gt;, &lt;a href="/images/logos/superfeedr.pdf"&gt;&lt;span class="caps"&gt;PDF&lt;/span&gt;&lt;/a&gt; and you can see on our &lt;a href="http://twitter.com/account/profile_image/superfeedr?hreflang=en"&gt;twitter account&lt;/a&gt; my own version! What do you think? You can download them and remix them as much as you want!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>The Console</title>
        
        <category term="console" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="debugging" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/24/the-console.html"/>
        <published>2009-07-24T00:00:00-07:00</published>
        <updated>2009-07-24T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/24/the-console</id>
        <content type="html">&lt;p&gt;It is quite hard to debug notification based systems, because &lt;em&gt;developers usually have to wait&lt;/em&gt; for a notification to happen. It&amp;#8217;s been a &lt;a href="http://groups.google.com/group/superfeedr/browse_thread/thread/b237d690372050b2"&gt;common request from several&lt;/a&gt; of our users over the past month and we&amp;#8217;re happy to say that we released today a solution to this problem : &lt;strong&gt;the console&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Basically, when logged in, you should see &amp;#8216;Your feeds&amp;#8217; in the top bar. Click there, and then, at the bottom of the page, click on &amp;#8220;Console&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/console.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;The console is a tool that will enable you to see notifications directly pushed to your browser, exactly as they would be pushed to your &lt;span class="caps"&gt;XMPP&lt;/span&gt; client (technically, the console IS an &lt;span class="caps"&gt;XMPP&lt;/span&gt; client).&lt;/p&gt;
&lt;p&gt;To see actual notifications happening, we&amp;#8217;ve also created a &lt;a href="http://superfeedr.com/dummy.xml"&gt;dummy atom feeds&lt;/a&gt;. In the console interface, you should see a link that, when clicks, publishes a new entry in this dummy feed. A few seconds (or less) later, you should see the new notification in your console. Of course, &lt;em&gt;that works with any feed&lt;/em&gt;, so you can as well add others.&lt;/p&gt;
&lt;p&gt;Here a a few tips to make that console even more useful :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The console only works if your using using your default jid : user@superfeedr.com  (no webhooks, no &amp;#8216;private&amp;#8217; jid)&lt;/li&gt;
	&lt;li&gt;Add http://superfeedr.com/dummy.xml to your feeds (and more feeds)&lt;/li&gt;
	&lt;li&gt;Change your notification mode (See &amp;#8216;settings&amp;#8217;) to &amp;#8220;Each time we pull and parse one of your feeds&amp;#8221;&lt;/li&gt;
	&lt;li&gt;Leave the console open for a few hours : notifications will stack up (most recent at the top)&lt;/li&gt;
&lt;/ul&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Kind of Open Source</title>
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/22/kind-of-open-source.html"/>
        <published>2009-07-22T00:00:00-07:00</published>
        <updated>2009-07-22T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/22/kind-of-open-source</id>
        <content type="html">&lt;p&gt;When &lt;a href="http://twitter.com/superfeedr/status/2762315579"&gt;I tweeted about sharing&lt;/a&gt; our Investor Deck yesterday, I received immediately a few IM and email of friends who wanted to make sure I was doing the right decision. They were scared that I would make some private things public. I &lt;strong&gt;fully understand their concern&lt;/strong&gt;, but I really want &lt;strong&gt;Superfeedr to be an Open Service&lt;/strong&gt;, where we are guided by our users more than our wallet. &lt;em&gt;We value their opinion more than ours because in the end, they are going to pay for our service, not us&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Why not release our software as Open Source, then?&lt;/h3&gt;
&lt;p style="float:right;"&gt;&lt;img src="http://upload.wikimedia.org/wikipedia/commons/4/42/Opensource.svg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Because that wouldn&amp;#8217;t work.&lt;/strong&gt; The idea with Superfeedr is to &lt;a href="http://blog.superfeedr.com/gospel/something-stupid/"&gt;do something stupid so that nobody else has to do it&lt;/a&gt;. If we release our software, then, everybody would run their standalone superfeedr and people will keep doing this inefficient polling that wastes our resources.&lt;br /&gt;
&lt;em&gt;Superfeedr will work only with massive economies of scale&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We will eventually release huge parts (and &lt;a href="http://github.com/superfeedr"&gt;we already started&lt;/a&gt;) of our software as open source, as we will probably communicate and ask advices on as much as we can that relates to Superfeedr. If you&amp;#8217;d like to give a look at our deck, send us your email as a &lt;a href="http://twitter.com/direct_messages/create/superfeedr"&gt;direct message&lt;/a&gt;. Also, follow us on Twitter, because I will (&lt;a href="http://twitter.com/jineshmehta/statuses/2777183409"&gt;thanks to @jineshmehta&lt;/a&gt;) release there the master file of our logo. I hope you can then make it even nicer. (&lt;span class="caps"&gt;BTW&lt;/span&gt;, &lt;a href="http://twitter.com/superfeedr/status/2772907149"&gt;red, or green?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;You are the brains of our service, giving the ideas, suggesting the directions. We are just the &lt;del&gt;small&lt;/del&gt; hands selecting, organizing and implementing ideas.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Reality checked</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/21/reality-checked.html"/>
        <published>2009-07-21T00:00:00-07:00</published>
        <updated>2009-07-21T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/21/reality-checked</id>
        <content type="html">&lt;p&gt;A lot of people have asked us why we built &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; or what is the relationship to &lt;a href="http://notifixio.us"&gt;Notifixious&lt;/a&gt;. Here are a few hints.&lt;/p&gt;
&lt;p&gt;A little over a year we launched Notifixious. The idea behind it was to allow any internet user to &lt;em&gt;receive real-time updates from his favorite websites&lt;/em&gt;. We would send these updates either by email, &lt;span class="caps"&gt;SMS&lt;/span&gt; or Instant Messaging. For example, a user might subscribe to a blog to receive the last updates, or to a newspaper site. A user could also subscribe to a &lt;a href="http://sfbay.craigslist.org/apa/"&gt;Craigslist search&lt;/a&gt; to be the first to know about a new place to move in, or to &lt;a href="http://notifixio.us/simplyhired"&gt;Simply Hired&lt;/a&gt; to get the last jobs in his field of expertise.&lt;/p&gt;
&lt;p&gt;Earlier this year, we did &lt;strong&gt;an extensive analysis of our user base&lt;/strong&gt; and found out 2 patterns.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;About &lt;strong&gt;60% of our users would select email&lt;/strong&gt; to receive their notifications. On average they would subscribe to &lt;strong&gt;1 single website&lt;/strong&gt; and most of the time it was a blog. These users have clearly been acquired through our &lt;a href="http://notifixio.us/sources/widgets"&gt;widget&lt;/a&gt;. We were very disappointed : email is not real-time and the email user-experience is usually bad : spam, phishing&amp;#8230; etc. We asked those people why they chose email and the answer was clear : they are &lt;strong&gt;scared by information overload&lt;/strong&gt; and have &lt;strong&gt;no idea how to deal with an incoming stream&lt;/strong&gt; of notifications which is very &lt;em&gt;stressful&lt;/em&gt;, because they &lt;strong&gt;know&lt;/strong&gt; they wanted to receive these notifications.&lt;/li&gt;
	&lt;li&gt;A &lt;strong&gt;dozen of our users&lt;/strong&gt; had, on the other hand, subscribed to more than 500 feeds. Oddly enough they were &lt;strong&gt;all using our &lt;span class="caps"&gt;XMPP&lt;/span&gt; api or a jabber account&lt;/strong&gt; to receive these notifications. This behavior was very interesting compared to the first group. We contacted most of them and understood that they were actually using &lt;strong&gt;notifixious as a middleware&lt;/strong&gt; for their own application or service. In a nutshell, they were using Notifixious as an on-demand feed parsing service. That was a very insightful discovery since &lt;strong&gt;some of them even said they would pay&lt;/strong&gt; for our service. The idea to extract &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; out of Notifixious was born.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We still haven&amp;#8217;t identified how to deal with the first group, except that &lt;strong&gt;real-time services will need to find a way to avoid that information overload&lt;/strong&gt; (or at least the sensation of it). However, by observing and understanding the behavior of a &lt;del&gt;very&lt;/del&gt; small set of users, we&amp;#8217;ve been able to identify some of the value of our service.&lt;/p&gt;
&lt;p&gt;We even believe that this very small subset of our user base carried the biggest of the value our service provided. By continuously looping the feedback with this small user base, we think we can provide a great service!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Federating PubSubHubbub</title>
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="federation" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/12/federating-pubsubhubbub.html"/>
        <published>2009-07-12T00:00:00-07:00</published>
        <updated>2009-07-12T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/12/federating-pubsubhubbub</id>
        <content type="html">&lt;p&gt;PubSubHubbub has been the &lt;a href="http://search.twitter.com/search?q=PubSubhubbub"&gt;RealTime web celebrity&lt;/a&gt; in the past few days. &lt;a href="http://adsenseforfeeds.blogspot.com/2009/07/whats-all-hubbub-about-pubsubhubbub.html"&gt;Google announced&lt;/a&gt; their support for Feedburner and Blogger, and that&amp;#8217;s great to see the interest growing.&lt;/p&gt;
&lt;p&gt;We decided a few weeks ago that &lt;a href="http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub/"&gt;PubSubHubbub would be our &lt;span class="caps"&gt;HTTP&lt;/span&gt; &lt;span class="caps"&gt;API&lt;/span&gt;&lt;/a&gt; and it&amp;#8217;s been a great choice for us as many developers have started to work on language specific libraries to interact with hubs.&lt;/p&gt;
&lt;p&gt;Today, we&amp;#8217;re announcing that &lt;strong&gt;not only we&amp;#8217;re a hub, but we&amp;#8217;re also a subscriber&lt;/strong&gt;. In other terms, it means that whenever a feed indicates a hub, Superfeedr will subscribe to this hub to get updates from it in real-time. That is a great addition to &lt;a href="http://superfeedr.com/technology"&gt;our set of helpers&lt;/a&gt; and it will hopefully help us &lt;em&gt;improve yet again our detection time&lt;/em&gt; of new entries.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.google.com/present/view?id=ajd8t6gk4mh2_34dvbpchfs"&gt;&lt;img src="/images/federated_pubsubhubbub.png" alt="" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At a broader level, it is &lt;a href="http://www.scripting.com/stories/2009/07/11/morePubsubhubbubFeedback.html"&gt;interesting to compare&lt;/a&gt; PubSubHubbub with previous initiatives, and, as far as I know, PubSubHubbub is the first one to actually enable easily this &amp;#8220;federation&amp;#8221; structure (similar to what &lt;a href="http://xmpp.org/rfcs/rfc3920.html"&gt;&lt;span class="caps"&gt;XMPP&lt;/span&gt; offers&lt;/a&gt;), where &lt;em&gt;subscribers can select their favorite hubs&lt;/em&gt; and &lt;em&gt;hubs can communicate together&lt;/em&gt; to provide updates to all their users.&lt;/p&gt;
&lt;p&gt;It makes the PubSubHubbub &amp;#8220;network&amp;#8221; even more decentralized and scalable/fault-resistant. For those into &lt;a href="http://en.wikipedia.org/wiki/Graph_%28mathematics%29"&gt;graph theory&lt;/a&gt;, you will immediately see the benefit of such an architecture : virtually ubiquitous new data publication, as long as there is a (not too long) path from any node to any other node!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Customer Care Lesson</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/10/customer-care-lesson.html"/>
        <published>2009-07-10T00:00:00-07:00</published>
        <updated>2009-07-10T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/10/customer-care-lesson</id>
        <content type="html">&lt;p&gt;Yesterday, the Carsonified team relaunched their website and it&amp;#8217;s looking great. The &lt;a href="http://carsonified.com/mission/"&gt;Mission page&lt;/a&gt; should be a lesson for everybody:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At Carsonified we believe in treating other people like we want to be treated: with &lt;strong&gt;friendliness, patience and respect&lt;/strong&gt;. We believe that the web industry is one of the most exciting places in the world, and that &lt;strong&gt;it&amp;#8217;s an honor for us to connect, encourage and train that community through our events&lt;/strong&gt;. We believe in being more creative than we need to be and having fun while we&amp;#8217;re at it.&lt;/p&gt;
&lt;/blockquote&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>There is no such thing as Real Time Search</title>
        
        <category term="real-time" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/09/there-is-such-thing-as-real-time-web-search.html"/>
        <published>2009-07-09T00:00:00-07:00</published>
        <updated>2009-07-09T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/09/there-is-such-thing-as-real-time-web-search</id>
        <content type="html">&lt;p&gt;&lt;em&gt;Real-time search&lt;/em&gt; seems to be the most common tagline these days. Real-time is the new hotness (&lt;a href="http://blog.superfeedr.com/gospel/infrastructure/realtime/building-realtime/"&gt;we agree&lt;/a&gt;!) and Google almost made &amp;#8216;Revenue&amp;#8217; and &amp;#8216;Search&amp;#8217; synonyms. I guess it was tempting to mix both ;)&lt;/p&gt;
&lt;p&gt;When I am doing a &amp;#8220;search&amp;#8221; on &lt;a href="http://google.com"&gt;Google&lt;/a&gt; or &lt;a href="http://bing.com"&gt;Bing&lt;/a&gt; (try it!), I technically don&amp;#8217;t know what I will find. To be more precise, I don&amp;#8217;t know where I will find the information, and I even don&amp;#8217;t know if what I am looking for exists.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://search.twitter.com"&gt;Twitter Search&lt;/a&gt; (ex-summize) is clearly the best known example of Real-time Search and &lt;a href="http://collecta.com"&gt;Collecta&lt;/a&gt; is a good &amp;#8220;cross-services&amp;#8221; examples. I wouldn&amp;#8217;t call any of them search engines, but rather &amp;#8220;&lt;strong&gt;filters&lt;/strong&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In both cases, I do searches about things that are happening (Jackson&amp;#8217;s death, Palin&amp;#8217;s resignation&amp;#8230;), which proves they exist. I also tend to know what I&amp;#8217;ll find : images, links to more in-depth articles&amp;#8230; etc. I am just trying to &amp;#8220;filter&amp;#8221; the stream of information, not searching for an answer.&lt;/p&gt;
&lt;p&gt;In the end, both traditional search-engines and real-time filters have to deal with &lt;strong&gt;relevance&lt;/strong&gt;, but I think the &lt;strong&gt;user&amp;#8217;s expectations are very different in both cases&lt;/strong&gt;. What do you think?&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Speeding Up RSS : what for?</title>
        
        <category term="RSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Atom" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Feeds" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Push" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Techcrunch" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/09/speeding-up-rss.html"/>
        <published>2009-07-09T00:00:00-07:00</published>
        <updated>2009-07-09T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/09/speeding-up-rss</id>
        <content type="html">&lt;p&gt;&lt;a href="http://twitter.com/Erickschonfeld"&gt;Erick Schonfeld&lt;/a&gt; published the &lt;a href="http://www.techcrunch.com/2009/07/09/speeding-up-rss/"&gt;blog post of the &lt;del&gt;day&lt;/del&gt; week&lt;/a&gt;. Despite the fact that he should have talked about &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt;, I think this is an awesome article. I am really looking forward to &lt;a href="http://www.techcrunch.com/2009/07/08/win-a-ticket-to-the-real-time-stream-crunchup-this-friday/"&gt;tomorrow&amp;#8217;s panel&lt;/a&gt; and see what &amp;#8220;Brett&amp;#8221;, Brad, Freddy and Andy have to talk about.&lt;/p&gt;
&lt;p&gt;The comments, though are very interesting and they show what we&amp;#8217;ve observed with &amp;quot;Notifixious&amp;quot;http://notifixio.us over the last year : Real-time notification (or faster &lt;span class="caps"&gt;RSS&lt;/span&gt;) scares people a lot. There is at least 4 or 5 comments saying that &lt;span class="caps"&gt;RSS&lt;/span&gt; is fast enough for them. The problem here, is that there is a misconception :* making &lt;span class="caps"&gt;RSS&lt;/span&gt; faster is not for individuals, but for the web itself*.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub/"&gt;PubSubHubbub&lt;/a&gt; has the potential to bring Push to the &lt;span class="caps"&gt;RSS&lt;/span&gt; and Atom technologies. So not only it will be faster, but it will be instantaneous, and when Feed updates will be instantaneous, nobody will pull anymore (&lt;a href="http://blog.superfeedr.com/gospel/something-stupid/"&gt;not even us&lt;/a&gt;) and the web will be better.&lt;/p&gt;
&lt;p&gt;Better? Publishers will not have to &lt;em&gt;handle massive loads anymore&lt;/em&gt; (like Twitter had to), and Subscribers (services) will &lt;em&gt;not have to poll over and over to get updates&lt;/em&gt;.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>The future of Web apps?</title>
        
        <category term="dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="web-apps" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/05/the-future-of-web-apps.html"/>
        <published>2009-07-05T00:00:00-07:00</published>
        <updated>2009-07-05T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/05/the-future-of-web-apps</id>
        <content type="html">&lt;p&gt;A lot of people have shown interest in &lt;a href="http://github.com/superfeedr/aristochat/tree/master"&gt;Aristochat&lt;/a&gt; and the &lt;a href="http://superfeedr.com/chat"&gt;Superfeedr chat&lt;/a&gt; last week. However, I haven&amp;#8217;t talked about what is &amp;#8211; according to me &amp;#8211; the greatest thing about it : &lt;strong&gt;it&amp;#8217;s hosted on Github&lt;/strong&gt;. Not only the source code, &lt;a href="http://github.com/superfeedr/Superfeedr-Chat/tree/gh-pages"&gt;but the app itself&lt;/a&gt;, and since it&amp;#8217;s a &lt;a href="http://github.com/superfeedr/Superfeedr-Chat/blob/9d01a452c0f5e21b3deda1221e3d47e84e6c34c5/index.html"&gt;basic &lt;span class="caps"&gt;HTML&lt;/span&gt; file&lt;/a&gt; with a &lt;a href="http://github.com/superfeedr/Superfeedr-Chat/blob/9d01a452c0f5e21b3deda1221e3d47e84e6c34c5/chat.js"&gt;little bit of Javascript&lt;/a&gt;, it could have very been hosted on EC2 as well, or on any type server that can server &lt;span class="caps"&gt;HTML&lt;/span&gt; file.&lt;/p&gt;
&lt;p&gt;This blog is also a great example : technically, it&amp;#8217;s an app, and yet, it&amp;#8217;s made of static &lt;span class="caps"&gt;HTML&lt;/span&gt; files, &lt;a href="http://github.com/superfeedr/superfeedr.github.com/tree/master"&gt;hosted on Github&lt;/a&gt; as well. I think these 2 examples can give us a &amp;#8220;hint&amp;#8221; on what Web apps will look like in a not so distant future :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A bunch of static &lt;span class="caps"&gt;HTTP&lt;/span&gt; files with &lt;span class="caps"&gt;CSS&lt;/span&gt;, served by clusters&lt;/li&gt;
	&lt;li&gt;A lot of Javascript inside these pages to enhance the user experience with effects, drag and drops&amp;#8230; etc&lt;/li&gt;
	&lt;li&gt;Some &lt;span class="caps"&gt;AJAX&lt;/span&gt; to send and receive data from one (or more) application servers, through &lt;span class="caps"&gt;APIS&lt;/span&gt; (&lt;span class="caps"&gt;JSON&lt;/span&gt;, or &lt;span class="caps"&gt;XML&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The great thing about that is that web services (and developers) can focus on a single &amp;#8220;job&amp;#8221;, while designers, UX engineers can &amp;#8216;pick&amp;#8217; up whatever tool they want to integrate into an app and make it richer.&lt;/p&gt;
&lt;p&gt;With this approach, you can really decouple more and more the data and the processing from the views. The APIs can very well be consumed by a webservice, but also by, say, an iPhone App, an Adobe Air App, or even external web services and we sites.&lt;/p&gt;
&lt;p&gt;This should sound familiar, doesn&amp;#8217;t it? It&amp;#8217;s very close from the &lt;span class="caps"&gt;MVC&lt;/span&gt; model that we all learnt to create desktop apps.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Aristochat</title>
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Chat" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="XMPP" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="MUC" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/07/03/aristochat.html"/>
        <published>2009-07-03T00:00:00-07:00</published>
        <updated>2009-07-03T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/07/03/aristochat</id>
        <content type="html">&lt;p&gt;It all started when we used &lt;a href="http://chat.slicehost.com/"&gt;Slicehost&amp;#8217;s chat-room&lt;/a&gt; for their support : not only it&amp;#8217;s awesome to have 24/7 support, but it&amp;#8217;s also great to have a short-message interface that allows real-time discussion and interaction.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;a href="http://campfirenow.com/"&gt;Campfire&lt;/a&gt; is &amp;#8220;proprietary&amp;#8221; software and it doesn&amp;#8217;t seem to be &lt;span class="caps"&gt;XMPP&lt;/span&gt; based. &lt;span class="caps"&gt;XMPP&lt;/span&gt; is known as &lt;strong&gt;&lt;span class="caps"&gt;THE&lt;/span&gt;&lt;/strong&gt; instant messaging protocol, and it has the fairly well defined and complete &lt;a href="http://xmpp.org/extensions/xep-0045.html"&gt;Multi User Chat Extension&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Also, &lt;span class="caps"&gt;XMPP&lt;/span&gt; has &lt;a href="http://xmpp.org/extensions/xep-0206.html"&gt;Bosh&lt;/a&gt;, which allows transportation of &lt;span class="caps"&gt;XMPP&lt;/span&gt; stanzas over &lt;span class="caps"&gt;HTTP&lt;/span&gt;. From that, there is no reason to think we couldn&amp;#8217;t do a &lt;strong&gt;Web Based Multi User Chat&lt;/strong&gt;, with just &lt;em&gt;1 &lt;span class="caps"&gt;HTML&lt;/span&gt; page&lt;/em&gt;, and &lt;em&gt;1 Javascript&lt;/em&gt; and that could be integrated in any web framework in just a few seconds : meet &lt;a href="http://github.com/superfeedr/aristochat/tree/master"&gt;Aristochat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/aristocats.jpg" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;The great thing about Aristochat is that &lt;em&gt;it&amp;#8217;s just a &lt;span class="caps"&gt;MUC&lt;/span&gt; client&lt;/em&gt;, which means that you can connect (and manage) to the room as well from your favorite &lt;span class="caps"&gt;XMPP&lt;/span&gt; client (like &lt;a href="http://psi-im.org/"&gt;Psi&lt;/a&gt; &lt;a href="http://www.gajim.org/"&gt;Gajim&lt;/a&gt; or &lt;a href="http://adium.im/"&gt;Adium&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Check the &lt;a href="http://superfeedr.com/chat/"&gt;Superfeer chat&lt;/a&gt; to see an example. And, yes, &lt;a href="http://github.com/superfeedr/aristochat/tree/master"&gt;Aristochat&lt;/a&gt; is &lt;span class="caps"&gt;OSS&lt;/span&gt;, so you can fork, fetch and push it back with more features!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>User Test Driven Development</title>
        
        <category term="schema" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="test" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="mapping" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/30/user-test-driven-development.html"/>
        <published>2009-06-30T00:00:00-07:00</published>
        <updated>2009-06-30T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/30/user-test-driven-development</id>
        <content type="html">&lt;p&gt;We are &lt;strong&gt;strong believer&lt;/strong&gt; of &lt;a href="http://en.wikipedia.org/wiki/Test-driven_development"&gt;Test Driven Development&lt;/a&gt;. It&amp;#8217;s a very powerful approach that allows you to write tests before actually writing code. (These tests are actually specifications). That is how we created our parsers : we selected random feeds on the web, and decided what &lt;em&gt;should&lt;/em&gt; be the mapping between their data and our &lt;a href="http://blog.superfeedr.com/Atom/schema/a-better-schema/"&gt;standard Atom schema&lt;/a&gt;. Then, we wrote the code to actually perform the mapping.&lt;/p&gt;
&lt;p&gt;Unfortunately, the web &lt;strong&gt;isn&amp;#8217;t&lt;/strong&gt; standard (that&amp;#8217;s actually one of the problems we tackle!), so there are probably feeds out there for which the mapping that we&amp;#8217;ve identified isn&amp;#8217;t what you would expect us to do. You can help us improve our mapping to fit your needs.&lt;/p&gt;
&lt;p&gt;In our test suites we have &lt;span class="caps"&gt;YAML&lt;/span&gt; files representing these mappings and their corresponding &lt;span class="caps"&gt;XML&lt;/span&gt; files. Then, we run it by comparing the parsed document to the &lt;span class="caps"&gt;YAML&lt;/span&gt; mappings.&lt;/p&gt;
&lt;p&gt;Here is and &lt;span class="caps"&gt;XML&lt;/span&gt; feed :&lt;br /&gt;
&lt;script src="http://gist.github.com/138121.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Here is a example of mapping :&lt;br /&gt;
&lt;script src="http://gist.github.com/138122.js"&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;If you have identified a feed that you think we&amp;#8217;re not parsing correctly, please, send us a this feed.xml file, along with the corresponding specification yaml file. We will then &lt;strong&gt;fix our code so that we extract the right info from your file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can use this &lt;a href="http://gist.github.com/138123"&gt;template&lt;/a&gt; for the mapping file.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Building Realtime : turning feeds into streams</title>
        
        <category term="realtime" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="infrastructure" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/28/building-realtime.html"/>
        <published>2009-06-28T00:00:00-07:00</published>
        <updated>2009-06-28T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/28/building-realtime</id>
        <content type="html">&lt;p&gt;Technically, &lt;a href="http://en.wikipedia.org/wiki/Real-time_computing"&gt;Real-Time Computing&lt;/a&gt; implies that there is a &lt;em&gt;time constraint&lt;/em&gt; in a system, it&amp;#8217;s &lt;strong&gt;different from instantaneity&lt;/strong&gt;. A real-time service is a service that can guarantee that it would do something in a given amount of time. &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; is real-time, since we can guarantee that we will notify new entries in a feed to our users within a 15 minutes time frame.&lt;/p&gt;
&lt;p&gt;This is only achievable if we &amp;#8220;&lt;strong&gt;push&lt;/strong&gt;&amp;#8221; the information toward our users. We couldn&amp;#8217;t guarantee delivery time if we asked them to &amp;#8220;pull&amp;#8221; from us&lt;sup class="footnote"&gt;&lt;a href="#fn1"&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This is a keyword here : in a real-time web, &lt;strong&gt;information is pushed from a place to another one&lt;/strong&gt;. &lt;em&gt;Facebook pushes my friend updates to my homepage, Twitter search pushes new result to the result page, Friendfeed pushes the conversation to a topic&amp;#8217;s page&amp;#8230; etc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, as the web is right now, the information is almost never pushed to anybody. Look at this blog. I will publish this blog post and wait for you, for Google, for search engines to actually pull its content. Similarly, these services, once they have the information will probably not push it to anyone.&lt;/p&gt;
&lt;p&gt;In a perfect world, not only I would push this new content to you readers, to Google, to Delicious, to Digg, to Twitter, but also these services would push an update to their users and other services to notify them that received something from superfeedr&amp;#8230; and so on.&lt;/p&gt;
&lt;p&gt;Our mission at Superfeedr is to take all these &amp;#8216;static&amp;#8217; bits of information that are feeds, and push them to your services so that you can as well push them (or derived information) to other services&amp;#8230; creating a stream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We&amp;#8217;re turning feeds into stream.&lt;/strong&gt;&lt;/p&gt;
&lt;p class="footnote" id="fn1"&gt;&lt;sup&gt;1&lt;/sup&gt; On top of that, &lt;a href="http://blog.superfeedr.com/gospel/something-stupid/"&gt;pull is stupid&lt;/a&gt; .&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>A better Schema</title>
        
        <category term="Atom" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="schema" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/25/a-better-schema.html"/>
        <published>2009-06-25T00:00:00-07:00</published>
        <updated>2009-06-25T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/25/a-better-schema</id>
        <content type="html">&lt;p&gt;One of the great features of &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; is that it sends a standard format for feed entries. Whether the initial feed format was any flavor of Atom, or &lt;span class="caps"&gt;RSS&lt;/span&gt;, we would map this into a standard Atom feed. Thanks to that it is &lt;strong&gt;easier&lt;/strong&gt; for you to integrate this data into your apps, since you will gain &lt;em&gt;consistency&lt;/em&gt; in the format.&lt;/p&gt;
&lt;p&gt;However, to achieve that, we have to make some decisions and scraps information from the initial feed. Mapping a title is easy, but that&amp;#8217;s about the only obvious data. We actually had to find the smallest common set of attribute that a feed has.&lt;br /&gt;
Up to now, entries that we sent had this :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ID&lt;/li&gt;
	&lt;li&gt;&lt;span class="caps"&gt;URL&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Title&lt;/li&gt;
	&lt;li&gt;Summary&lt;/li&gt;
	&lt;li&gt;Published date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;#8217;ve been working to complete that over the past few weeks, and here is what you will soon get, on top of what you already have:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Content (if available, if not, you&amp;#8217;ll get a summary)&lt;/li&gt;
	&lt;li&gt;Categories (or tags)&lt;/li&gt;
	&lt;li&gt;Authors informations : email, name and uri&lt;/li&gt;
	&lt;li&gt;Links : not only you will get the entry&amp;#8217;s url, but you will also get any other link that the entry may contain : enclosure, comments&amp;#8230; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new schema will be published soon, but first, we want to make sure that there is no other element that you would want to see added to it. What would you add in there?&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>RSS or Atom, not both!</title>
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="feeds" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/23/atom-or-rss-not-both.html"/>
        <published>2009-06-23T00:00:00-07:00</published>
        <updated>2009-06-23T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/23/atom-or-rss-not-both</id>
        <content type="html">&lt;p&gt;&lt;a href="http://en.wikipedia.org/wiki/RSS_(file_format)"&gt;&lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/a&gt; and &lt;a href="http://www.atomenabled.org/developers/syndication/atom-format-spec.php"&gt;&lt;span class="caps"&gt;ATOM&lt;/span&gt;&lt;/a&gt; have very similar (if not identical) purposes. I don&amp;#8217;t know any feed consumer that consumes only one type, yet, a lot of services are still providing both.&lt;/p&gt;
&lt;p&gt;Publishing both is useless, because it&amp;#8217;s likely that services will end up polling both of them, to identify new content. It is very hard for them to be 100% sure that they actually contain (and will always contain) the same information. You know that &lt;a href="http://blog.superfeedr.com/gospel/something-stupid/"&gt;polling your blog or service is stupid&lt;/a&gt;&amp;#8230; don&amp;#8217;t make twice as stupid.&lt;/p&gt;
&lt;p&gt;Yet, if you publish both &lt;span class="caps"&gt;ATOM&lt;/span&gt; and &lt;span class="caps"&gt;RSS&lt;/span&gt;, make our lives easier in two steps :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove the extra &lt;code&gt;&amp;lt;link href="..."&amp;gt;&lt;/code&gt;, by keeping just Atom or &lt;span class="caps"&gt;RSS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Add a 301 redirection from one to another, so that you&amp;#8217;re not messing with your existing pollers (as they should probably follow redirections and be able to parse either format) : with Apache it&amp;#8217;s as easy as: &lt;code&gt;RedirectMatch 301 /statuses/user_timeline/(.*)\.rss http://twitter.com/statuses/user_timeline/$1.atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No more excuse for not doing it! Please note that I am not discussing whether you should keep &lt;span class="caps"&gt;ATOM&lt;/span&gt; or &lt;span class="caps"&gt;RSS&lt;/span&gt;. I&amp;#8217;d go for Atom, but that&amp;#8217;s a not the case for everybody.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>We're doing something stupid so that you don't have to</title>
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/19/something-stupid.html"/>
        <published>2009-06-19T00:00:00-07:00</published>
        <updated>2009-06-19T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/19/something-stupid</id>
        <content type="html">&lt;p&gt;It&amp;#8217;s a fact, polling sucks, and it sucks, because it&amp;#8217;s stupid. This is what &lt;a href="http://twitter.com/kellan"&gt;kellan&lt;/a&gt; and &lt;a href="http://twitter.com/rabble"&gt;rabble&lt;/a&gt; &lt;a href="http://www.slideshare.net/rabble/beyond-rest-building-data-services-with-xmpp-pubsub?src=embed"&gt;showed last year&lt;/a&gt; at &lt;span class="caps"&gt;OSCON&lt;/span&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On July 21, 2008, Friendfeed hit Flickr 2.9 million times to get the latest photos of 45,754 users, of which 6,721 visited Flickr in that 24-hour period, and could have potentially uploaded a photo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is &lt;strong&gt;just friendfeed&lt;/strong&gt;. How many services is there around here that are polling Flickr, Twitter, Delicious, Youtube, or even this blog? Thousands (except maybe for this blog).&lt;/p&gt;
&lt;p&gt;&lt;img src="/images/polling_sucks.png" alt="" /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Push is the solution&lt;/strong&gt;. Except that it only works if each service out there pushes, and if each consumer actually accepts to receive pushed content. That makes it pretty hypothetical, right?&lt;/p&gt;
&lt;p&gt;We (pollers) should &lt;strong&gt;collaborate&lt;/strong&gt;. Collaboration means that, even if we can all poll, there is probably no need for that. &lt;em&gt;We could probably all grow tomatoes, but it makes more sense to buy them from someone who can grow them cheaper and more effectively than us&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; is all about: &lt;del&gt;growing tomatoes&lt;/del&gt; doing something that you could do, but doing it &lt;a href="http://superfeedr.com/cost"&gt;cheaper&lt;/a&gt;, more efficiently and, more importantly, by sharing the results with you.&lt;/p&gt;
&lt;p&gt;Yes, polling is still stupid, but we&amp;#8217;re doing it for you and everybody who cares about the same feeds.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>PubSubHubbub</title>
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="http" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/18/pubsubhubbub.html"/>
        <published>2009-06-18T00:00:00-07:00</published>
        <updated>2009-06-18T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/18/pubsubhubbub</id>
        <content type="html">&lt;p&gt;We&amp;#8217;re proud to announce that &lt;a href="http://superfeedr.com"&gt;Superfeedr&lt;/a&gt; is one of the very first services to actually support the infamous &lt;a href="http://code.google.com/p/pubsubhubbub/"&gt;PubSubHubbub&lt;/a&gt; protocol. If you think the name is ugly, check the &lt;span class="caps"&gt;CSS&lt;/span&gt; style of the &lt;a href="http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.1.html"&gt;spec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This presentation should give you enough details about PubSubhubbub.&lt;br /&gt;
&lt;iframe src='http://docs.google.com/EmbedSlideshow?docid=ajd8t6gk4mh2_34dvbpchfs&amp;amp;size=s' frameborder='0' width='400' height='350'&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;What does that mean for you superfeedr users? It means that you can get the &lt;span class="caps"&gt;ATOM&lt;/span&gt; payload of the feeds we parsed pushed to your endpoint url. Check our &lt;a href="http://groups.google.com/group/superfeedr/web/pubsubhubbub"&gt;implementation notes&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;p&gt;Ha, I almost forgot, you can find our hub there &lt;a href="http://superfeedr.com/hubbub"&gt;http://superfeedr.com/hubbub&lt;/a&gt;.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Hello World</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/2009/06/17/hello-world.html"/>
        <published>2009-06-17T00:00:00-07:00</published>
        <updated>2009-06-17T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/2009/06/17/hello-world</id>
        <content type="html">&lt;p&gt;Welcome to the Superfeedr&amp;#8217;s blog. I am not sure what you expect from here. You know what a geek does when he&amp;#8217;s embarrassed does, right? He gets into technical details.&lt;/p&gt;
&lt;p&gt;This blog has been built with the great piece of code that &lt;a href="http://github.com/mojombo/jekyll/tree/master"&gt;Jekyll&lt;/a&gt; is. It is hosted on &lt;a href="http://github.com"&gt;Github&lt;/a&gt;, and I used &lt;a href="http://macromates.com/"&gt;TextMate&lt;/a&gt; Version 1.5.8 (1498) to write it. I also used &lt;a href="http://git-scm.com/"&gt;Git&lt;/a&gt; to push it on our &lt;a href="http://github.com/superfeedr"&gt;Github&lt;/a&gt; repository. TextMate runs on my &lt;a href="http://www.apple.com/macbookpro/"&gt;MacBookPro&lt;/a&gt; 2.53 Ghz Intel Core 2 Duo, with 4 GB of DD3 &lt;span class="caps"&gt;RAM&lt;/span&gt;. It&amp;#8217;s about 85° F in the &lt;a href="http://maps.google.com/maps?client=safari&amp;amp;q=PariSoma&amp;amp;oe=UTF-8&amp;amp;ie=UTF8&amp;amp;hl=en&amp;amp;ll=37.774446,-122.41044&amp;amp;spn=0.04152,0.086002&amp;amp;z=14&amp;amp;iwloc=A"&gt;room&lt;/a&gt; in which I am working right now.&lt;/p&gt;
&lt;p&gt;Welcome!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
</feed>
<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title>Superfeedr Blog : Real-time cloudy thoughts from a super-hero</title>
    <link href="http://blog.superfeedr.com/atom.xml" rel="self"/>
    <link href="http://blog.superfeedr.com/"/>
    <updated>2009-07-24T12:48:28-07:00</updated>
    <id>http://blog.superfeedr.com/</id>
    
    
    <entry>
        <title>The Console</title>
        
        <category term="console" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="debugging" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="xmpp" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/console/debugging/xmpp/the-console"/>
        <updated>2009-07-24T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/console/debugging/xmpp/the-console</id>
        <content type="html">&lt;p&gt;It is quite hard to debug notification based systems, because &lt;em&gt;developers usually have to wait&lt;/em&gt; for a notification to happen. It&amp;#8217;s been a &lt;a href=&quot;http://groups.google.com/group/superfeedr/browse_thread/thread/b237d690372050b2&quot;&gt;common request from several&lt;/a&gt; of our users over the past month and we&amp;#8217;re happy to say that we released today a solution to this problem : &lt;strong&gt;the console&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Basically, when logged in, you should see &amp;#8216;Your feeds&amp;#8217; in the top bar. Click there, and then, at the bottom of the page, click on &amp;#8220;Console&amp;#8221;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/console.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The console is a tool that will enable you to see notifications directly pushed to your browser, exactly as they would be pushed to your &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; client (technically, the console IS an &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; client).&lt;/p&gt;
&lt;p&gt;To see actual notifications happening, we&amp;#8217;ve also created a &lt;a href=&quot;http://superfeedr.com/dummy.xml&quot;&gt;dummy atom feeds&lt;/a&gt;. In the console interface, you should see a link that, when clicks, publishes a new entry in this dummy feed. A few seconds (or less) later, you should see the new notification in your console. Of course, &lt;em&gt;that works with any feed&lt;/em&gt;, so you can as well add others.&lt;/p&gt;
&lt;p&gt;Here a a few tips to make that console even more useful :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;The console only works if your using using your default jid : user@superfeedr.com  (no webhooks, no &amp;#8216;private&amp;#8217; jid)&lt;/li&gt;
	&lt;li&gt;Add http://superfeedr.com/dummy.xml to your feeds (and more feeds)&lt;/li&gt;
	&lt;li&gt;Change your notification mode (See &amp;#8216;settings&amp;#8217;) to &amp;#8220;Each time we pull and parse one of your feeds&amp;#8221;&lt;/li&gt;
	&lt;li&gt;Leave the console open for a few hours : notifications will stack up (most recent at the top)&lt;/li&gt;
&lt;/ul&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Kind of Open Source</title>
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/OSS/gospel/kind-of-open-source"/>
        <updated>2009-07-22T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/OSS/gospel/kind-of-open-source</id>
        <content type="html">&lt;p&gt;When &lt;a href=&quot;http://twitter.com/superfeedr/status/2762315579&quot;&gt;I tweeted about sharing&lt;/a&gt; our Investor Deck yesterday, I received immediately a few IM and email of friends who wanted to make sure I was doing the right decision. They were scared that I would make some private things public. I &lt;strong&gt;fully understand their concern&lt;/strong&gt;, but I really want &lt;strong&gt;Superfeedr to be an Open Service&lt;/strong&gt;, where we are guided by our users more than our wallet. &lt;em&gt;We value their opinion more than ours because in the end, they are going to pay for our service, not us&lt;/em&gt;.&lt;/p&gt;
&lt;h3&gt;Why not release our software as Open Source, then?&lt;/h3&gt;
&lt;p style=&quot;float:right;&quot;&gt;&lt;img src=&quot;http://upload.wikimedia.org/wikipedia/commons/4/42/Opensource.svg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Because that wouldn&amp;#8217;t work.&lt;/strong&gt; The idea with Superfeedr is to &lt;a href=&quot;http://blog.superfeedr.com/gospel/something-stupid/&quot;&gt;do something stupid so that nobody else has to do it&lt;/a&gt;. If we release our software, then, everybody would run their standalone superfeedr and people will keep doing this inefficient polling that wastes our resources.&lt;br /&gt;
&lt;em&gt;Superfeedr will work only with massive economies of scale&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;We will eventually release huge parts (and &lt;a href=&quot;http://github.com/superfeedr&quot;&gt;we already started&lt;/a&gt;) of our software as open source, as we will probably communicate and ask advices on as much as we can that relates to Superfeedr. If you&amp;#8217;d like to give a look at our deck, send us your email as a &lt;a href=&quot;http://twitter.com/direct_messages/create/superfeedr&quot;&gt;direct message&lt;/a&gt;. Also, follow us on Twitter, because I will (&lt;a href=&quot;http://twitter.com/jineshmehta/statuses/2777183409&quot;&gt;thanks to @jineshmehta&lt;/a&gt;) release there the master file of our logo. I hope you can then make it even nicer. (&lt;span class=&quot;caps&quot;&gt;BTW&lt;/span&gt;, &lt;a href=&quot;http://twitter.com/superfeedr/status/2772907149&quot;&gt;red, or green?&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;You are the brains of our service, giving the ideas, suggesting the directions. We are just the &lt;del&gt;small&lt;/del&gt; hands selecting, organizing and implementing ideas.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Reality checked</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/meta/reality-checked"/>
        <updated>2009-07-21T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/meta/reality-checked</id>
        <content type="html">&lt;p&gt;A lot of people have asked us why we built &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; or what is the relationship to &lt;a href=&quot;http://notifixio.us&quot;&gt;Notifixious&lt;/a&gt;. Here are a few hints.&lt;/p&gt;
&lt;p&gt;A little over a year we launched Notifixious. The idea behind it was to allow any internet user to &lt;em&gt;receive real-time updates from his favorite websites&lt;/em&gt;. We would send these updates either by email, &lt;span class=&quot;caps&quot;&gt;SMS&lt;/span&gt; or Instant Messaging. For example, a user might subscribe to a blog to receive the last updates, or to a newspaper site. A user could also subscribe to a &lt;a href=&quot;http://sfbay.craigslist.org/apa/&quot;&gt;Craigslist search&lt;/a&gt; to be the first to know about a new place to move in, or to &lt;a href=&quot;http://notifixio.us/simplyhired&quot;&gt;Simply Hired&lt;/a&gt; to get the last jobs in his field of expertise.&lt;/p&gt;
&lt;p&gt;Earlier this year, we did &lt;strong&gt;an extensive analysis of our user base&lt;/strong&gt; and found out 2 patterns.&lt;/p&gt;
&lt;ol&gt;
	&lt;li&gt;About &lt;strong&gt;60% of our users would select email&lt;/strong&gt; to receive their notifications. On average they would subscribe to &lt;strong&gt;1 single website&lt;/strong&gt; and most of the time it was a blog. These users have clearly been acquired through our &lt;a href=&quot;http://notifixio.us/sources/widgets&quot;&gt;widget&lt;/a&gt;. We were very disappointed : email is not real-time and the email user-experience is usually bad : spam, phishing&amp;#8230; etc. We asked those people why they chose email and the answer was clear : they are &lt;strong&gt;scared by information overload&lt;/strong&gt; and have &lt;strong&gt;no idea how to deal with an incoming stream&lt;/strong&gt; of notifications which is very &lt;em&gt;stressful&lt;/em&gt;, because they &lt;strong&gt;know&lt;/strong&gt; they wanted to receive these notifications.&lt;/li&gt;
	&lt;li&gt;A &lt;strong&gt;dozen of our users&lt;/strong&gt; had, on the other hand, subscribed to more than 500 feeds. Oddly enough they were &lt;strong&gt;all using our &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; api or a jabber account&lt;/strong&gt; to receive these notifications. This behavior was very interesting compared to the first group. We contacted most of them and understood that they were actually using &lt;strong&gt;notifixious as a middleware&lt;/strong&gt; for their own application or service. In a nutshell, they were using Notifixious as an on-demand feed parsing service. That was a very insightful discovery since &lt;strong&gt;some of them even said they would pay&lt;/strong&gt; for our service. The idea to extract &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; out of Notifixious was born.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We still haven&amp;#8217;t identified how to deal with the first group, except that &lt;strong&gt;real-time services will need to find a way to avoid that information overload&lt;/strong&gt; (or at least the sensation of it). However, by observing and understanding the behavior of a &lt;del&gt;very&lt;/del&gt; small set of users, we&amp;#8217;ve been able to identify some of the value of our service.&lt;/p&gt;
&lt;p&gt;We even believe that this very small subset of our user base carried the biggest of the value our service provided. By continuously looping the feedback with this small user base, we think we can provide a great service!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Federating PubSubHubbub</title>
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="federation" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/api/federation/pubsubhubbub/federating-pubsubhubbub"/>
        <updated>2009-07-12T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/api/federation/pubsubhubbub/federating-pubsubhubbub</id>
        <content type="html">&lt;p&gt;PubSubHubbub has been the &lt;a href=&quot;http://search.twitter.com/search?q=PubSubhubbub&quot;&gt;RealTime web celebrity&lt;/a&gt; in the past few days. &lt;a href=&quot;http://adsenseforfeeds.blogspot.com/2009/07/whats-all-hubbub-about-pubsubhubbub.html&quot;&gt;Google announced&lt;/a&gt; their support for Feedburner and Blogger, and that&amp;#8217;s great to see the interest growing.&lt;/p&gt;
&lt;p&gt;We decided a few weeks ago that &lt;a href=&quot;http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub/&quot;&gt;PubSubHubbub would be our &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; &lt;span class=&quot;caps&quot;&gt;API&lt;/span&gt;&lt;/a&gt; and it&amp;#8217;s been a great choice for us as many developers have started to work on language specific libraries to interact with hubs.&lt;/p&gt;
&lt;p&gt;Today, we&amp;#8217;re announcing that &lt;strong&gt;not only we&amp;#8217;re a hub, but we&amp;#8217;re also a subscriber&lt;/strong&gt;. In other terms, it means that whenever a feed indicates a hub, Superfeedr will subscribe to this hub to get updates from it in real-time. That is a great addition to &lt;a href=&quot;http://superfeedr.com/technology&quot;&gt;our set of helpers&lt;/a&gt; and it will hopefully help us &lt;em&gt;improve yet again our detection time&lt;/em&gt; of new entries.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.google.com/present/view?id=ajd8t6gk4mh2_34dvbpchfs&quot;&gt;&lt;img src=&quot;/images/federated_pubsubhubbub.png&quot; alt=&quot;&quot; /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;At a broader level, it is &lt;a href=&quot;http://www.scripting.com/stories/2009/07/11/morePubsubhubbubFeedback.html&quot;&gt;interesting to compare&lt;/a&gt; PubSubHubbub with previous initiatives, and, as far as I know, PubSubHubbub is the first one to actually enable easily this &amp;#8220;federation&amp;#8221; structure (similar to what &lt;a href=&quot;http://xmpp.org/rfcs/rfc3920.html&quot;&gt;&lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; offers&lt;/a&gt;), where &lt;em&gt;subscribers can select their favorite hubs&lt;/em&gt; and &lt;em&gt;hubs can communicate together&lt;/em&gt; to provide updates to all their users.&lt;/p&gt;
&lt;p&gt;It makes the PubSubHubbub &amp;#8220;network&amp;#8221; even more decentralized and scalable/fault-resistant. For those into &lt;a href=&quot;http://en.wikipedia.org/wiki/Graph_%28mathematics%29&quot;&gt;graph theory&lt;/a&gt;, you will immediately see the benefit of such an architecture : virtually ubiquitous new data publication, as long as there is a (not too long) path from any node to any other node!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51<img src="../../../Desktop/federated_pubsubhubbub.png" width="386" height="303" alt="Federated Pubsubhubbub"></uri>
        </author>
    </entry>
    
    <entry>
        <title>Customer Care Lesson</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/meta/customer-care-lesson"/>
        <updated>2009-07-10T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/meta/customer-care-lesson</id>
        <content type="html">&lt;p&gt;Yesterday, the Carsonified team relaunched their website and it&amp;#8217;s looking great. The &lt;a href=&quot;http://carsonified.com/mission/&quot;&gt;Mission page&lt;/a&gt; should be a lesson for everybody:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;At Carsonified we believe in treating other people like we want to be treated: with &lt;strong&gt;friendliness, patience and respect&lt;/strong&gt;. We believe that the web industry is one of the most exciting places in the world, and that &lt;strong&gt;it&amp;#8217;s an honor for us to connect, encourage and train that community through our events&lt;/strong&gt;. We believe in being more creative than we need to be and having fun while we&amp;#8217;re at it.&lt;/p&gt;
&lt;/blockquote&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>There is no such thing as Real Time Search</title>
        
        <category term="real-time" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/real-time/there-is-such-thing-as-real-time-web-search"/>
        <updated>2009-07-09T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/real-time/there-is-such-thing-as-real-time-web-search</id>
        <content type="html">&lt;p&gt;&lt;em&gt;Real-time search&lt;/em&gt; seems to be the most common tagline these days. Real-time is the new hotness (&lt;a href=&quot;http://blog.superfeedr.com/gospel/infrastructure/realtime/building-realtime/&quot;&gt;we agree&lt;/a&gt;!) and Google almost made &amp;#8216;Revenue&amp;#8217; and &amp;#8216;Search&amp;#8217; synonyms. I guess it was tempting to mix both ;)&lt;/p&gt;
&lt;p&gt;When I am doing a &amp;#8220;search&amp;#8221; on &lt;a href=&quot;http://google.com&quot;&gt;Google&lt;/a&gt; or &lt;a href=&quot;http://bing.com&quot;&gt;Bing&lt;/a&gt; (try it!), I technically don&amp;#8217;t know what I will find. To be more precise, I don&amp;#8217;t know where I will find the information, and I even don&amp;#8217;t know if what I am looking for exists.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://search.twitter.com&quot;&gt;Twitter Search&lt;/a&gt; (ex-summize) is clearly the best known example of Real-time Search and &lt;a href=&quot;http://collecta.com&quot;&gt;Collecta&lt;/a&gt; is a good &amp;#8220;cross-services&amp;#8221; examples. I wouldn&amp;#8217;t call any of them search engines, but rather &amp;#8220;&lt;strong&gt;filters&lt;/strong&gt;&amp;#8221;.&lt;/p&gt;
&lt;p&gt;In both cases, I do searches about things that are happening (Jackson&amp;#8217;s death, Palin&amp;#8217;s resignation&amp;#8230;), which proves they exist. I also tend to know what I&amp;#8217;ll find : images, links to more in-depth articles&amp;#8230; etc. I am just trying to &amp;#8220;filter&amp;#8221; the stream of information, not searching for an answer.&lt;/p&gt;
&lt;p&gt;In the end, both traditional search-engines and real-time filters have to deal with &lt;strong&gt;relevance&lt;/strong&gt;, but I think the &lt;strong&gt;user&amp;#8217;s expectations are very different in both cases&lt;/strong&gt;. What do you think?&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Speeding Up RSS : what for?</title>
        
        <category term="RSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Atom" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Feeds" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Push" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Techcrunch" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/Atom/Feeds/Push/RSS/Techcrunch/speeding-up-rss"/>
        <updated>2009-07-09T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/Atom/Feeds/Push/RSS/Techcrunch/speeding-up-rss</id>
        <content type="html">&lt;p&gt;&lt;a href=&quot;http://twitter.com/Erickschonfeld&quot;&gt;Erick Schonfeld&lt;/a&gt; published the &lt;a href=&quot;http://www.techcrunch.com/2009/07/09/speeding-up-rss/&quot;&gt;blog post of the &lt;del&gt;day&lt;/del&gt; week&lt;/a&gt;. Despite the fact that he should have talked about &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt;, I think this is an awesome article. I am really looking forward to &lt;a href=&quot;http://www.techcrunch.com/2009/07/08/win-a-ticket-to-the-real-time-stream-crunchup-this-friday/&quot;&gt;tomorrow&amp;#8217;s panel&lt;/a&gt; and see what &amp;#8220;Brett&amp;#8221;, Brad, Freddy and Andy have to talk about.&lt;/p&gt;
&lt;p&gt;The comments, though are very interesting and they show what we&amp;#8217;ve observed with &amp;quot;Notifixious&amp;quot;http://notifixio.us over the last year : Real-time notification (or faster &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;) scares people a lot. There is at least 4 or 5 comments saying that &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; is fast enough for them. The problem here, is that there is a misconception :* making &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; faster is not for individuals, but for the web itself*.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub/&quot;&gt;PubSubHubbub&lt;/a&gt; has the potential to bring Push to the &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt; and Atom technologies. So not only it will be faster, but it will be instantaneous, and when Feed updates will be instantaneous, nobody will pull anymore (&lt;a href=&quot;http://blog.superfeedr.com/gospel/something-stupid/&quot;&gt;not even us&lt;/a&gt;) and the web will be better.&lt;/p&gt;
&lt;p&gt;Better? Publishers will not have to &lt;em&gt;handle massive loads anymore&lt;/em&gt; (like Twitter had to), and Subscribers (services) will &lt;em&gt;not have to poll over and over to get updates&lt;/em&gt;.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>The future of Web apps?</title>
        
        <category term="dev" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="web-apps" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/dev/gospel/web-apps/the-future-of-web-apps"/>
        <updated>2009-07-05T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/dev/gospel/web-apps/the-future-of-web-apps</id>
        <content type="html">&lt;p&gt;A lot of people have shown interest in &lt;a href=&quot;http://github.com/superfeedr/aristochat/tree/master&quot;&gt;Aristochat&lt;/a&gt; and the &lt;a href=&quot;http://superfeedr.com/chat&quot;&gt;Superfeedr chat&lt;/a&gt; last week. However, I haven&amp;#8217;t talked about what is &amp;#8211; according to me &amp;#8211; the greatest thing about it : &lt;strong&gt;it&amp;#8217;s hosted on Github&lt;/strong&gt;. Not only the source code, &lt;a href=&quot;http://github.com/superfeedr/Superfeedr-Chat/tree/gh-pages&quot;&gt;but the app itself&lt;/a&gt;, and since it&amp;#8217;s a &lt;a href=&quot;http://github.com/superfeedr/Superfeedr-Chat/blob/9d01a452c0f5e21b3deda1221e3d47e84e6c34c5/index.html&quot;&gt;basic &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; file&lt;/a&gt; with a &lt;a href=&quot;http://github.com/superfeedr/Superfeedr-Chat/blob/9d01a452c0f5e21b3deda1221e3d47e84e6c34c5/chat.js&quot;&gt;little bit of Javascript&lt;/a&gt;, it could have very been hosted on EC2 as well, or on any type server that can server &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; file.&lt;/p&gt;
&lt;p&gt;This blog is also a great example : technically, it&amp;#8217;s an app, and yet, it&amp;#8217;s made of static &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; files, &lt;a href=&quot;http://github.com/superfeedr/superfeedr.github.com/tree/master&quot;&gt;hosted on Github&lt;/a&gt; as well. I think these 2 examples can give us a &amp;#8220;hint&amp;#8221; on what Web apps will look like in a not so distant future :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;A bunch of static &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt; files with &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt;, served by clusters&lt;/li&gt;
	&lt;li&gt;A lot of Javascript inside these pages to enhance the user experience with effects, drag and drops&amp;#8230; etc&lt;/li&gt;
	&lt;li&gt;Some &lt;span class=&quot;caps&quot;&gt;AJAX&lt;/span&gt; to send and receive data from one (or more) application servers, through &lt;span class=&quot;caps&quot;&gt;APIS&lt;/span&gt; (&lt;span class=&quot;caps&quot;&gt;JSON&lt;/span&gt;, or &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The great thing about that is that web services (and developers) can focus on a single &amp;#8220;job&amp;#8221;, while designers, UX engineers can &amp;#8216;pick&amp;#8217; up whatever tool they want to integrate into an app and make it richer.&lt;/p&gt;
&lt;p&gt;With this approach, you can really decouple more and more the data and the processing from the views. The APIs can very well be consumed by a webservice, but also by, say, an iPhone App, an Adobe Air App, or even external web services and we sites.&lt;/p&gt;
&lt;p&gt;This should sound familiar, doesn&amp;#8217;t it? It&amp;#8217;s very close from the &lt;span class=&quot;caps&quot;&gt;MVC&lt;/span&gt; model that we all learnt to create desktop apps.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Aristochat</title>
        
        <category term="OSS" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="Chat" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="XMPP" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="MUC" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/Chat/MUC/OSS/XMPP/aristochat"/>
        <updated>2009-07-03T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/Chat/MUC/OSS/XMPP/aristochat</id>
        <content type="html">&lt;p&gt;It all started when we used &lt;a href=&quot;http://chat.slicehost.com/&quot;&gt;Slicehost&amp;#8217;s chat-room&lt;/a&gt; for their support : not only it&amp;#8217;s awesome to have 24/7 support, but it&amp;#8217;s also great to have a short-message interface that allows real-time discussion and interaction.&lt;/p&gt;
&lt;p&gt;Unfortunately, &lt;a href=&quot;http://campfirenow.com/&quot;&gt;Campfire&lt;/a&gt; is &amp;#8220;proprietary&amp;#8221; software and it doesn&amp;#8217;t seem to be &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; based. &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; is known as &lt;strong&gt;&lt;span class=&quot;caps&quot;&gt;THE&lt;/span&gt;&lt;/strong&gt; instant messaging protocol, and it has the fairly well defined and complete &lt;a href=&quot;http://xmpp.org/extensions/xep-0045.html&quot;&gt;Multi User Chat Extension&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;Also, &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; has &lt;a href=&quot;http://xmpp.org/extensions/xep-0206.html&quot;&gt;Bosh&lt;/a&gt;, which allows transportation of &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; stanzas over &lt;span class=&quot;caps&quot;&gt;HTTP&lt;/span&gt;. From that, there is no reason to think we couldn&amp;#8217;t do a &lt;strong&gt;Web Based Multi User Chat&lt;/strong&gt;, with just &lt;em&gt;1 &lt;span class=&quot;caps&quot;&gt;HTML&lt;/span&gt; page&lt;/em&gt;, and &lt;em&gt;1 Javascript&lt;/em&gt; and that could be integrated in any web framework in just a few seconds : meet &lt;a href=&quot;http://github.com/superfeedr/aristochat/tree/master&quot;&gt;Aristochat&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/aristocats.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;The great thing about Aristochat is that &lt;em&gt;it&amp;#8217;s just a &lt;span class=&quot;caps&quot;&gt;MUC&lt;/span&gt; client&lt;/em&gt;, which means that you can connect (and manage) to the room as well from your favorite &lt;span class=&quot;caps&quot;&gt;XMPP&lt;/span&gt; client (like &lt;a href=&quot;http://psi-im.org/&quot;&gt;Psi&lt;/a&gt; &lt;a href=&quot;http://www.gajim.org/&quot;&gt;Gajim&lt;/a&gt; or &lt;a href=&quot;http://adium.im/&quot;&gt;Adium&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Check the &lt;a href=&quot;http://superfeedr.com/chat/&quot;&gt;Superfeer chat&lt;/a&gt; to see an example. And, yes, &lt;a href=&quot;http://github.com/superfeedr/aristochat/tree/master&quot;&gt;Aristochat&lt;/a&gt; is &lt;span class=&quot;caps&quot;&gt;OSS&lt;/span&gt;, so you can fork, fetch and push it back with more features!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>User Test Driven Development</title>
        
        <category term="schema" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="test" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="mapping" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/mapping/schema/test/user-test-driven-development"/>
        <updated>2009-06-30T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/mapping/schema/test/user-test-driven-development</id>
        <content type="html">&lt;p&gt;We are &lt;strong&gt;strong believer&lt;/strong&gt; of &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;Test Driven Development&lt;/a&gt;. It&amp;#8217;s a very powerful approach that allows you to write tests before actually writing code. (These tests are actually specifications). That is how we created our parsers : we selected random feeds on the web, and decided what &lt;em&gt;should&lt;/em&gt; be the mapping between their data and our &lt;a href=&quot;http://blog.superfeedr.com/Atom/schema/a-better-schema/&quot;&gt;standard Atom schema&lt;/a&gt;. Then, we wrote the code to actually perform the mapping.&lt;/p&gt;
&lt;p&gt;Unfortunately, the web &lt;strong&gt;isn&amp;#8217;t&lt;/strong&gt; standard (that&amp;#8217;s actually one of the problems we tackle!), so there are probably feeds out there for which the mapping that we&amp;#8217;ve identified isn&amp;#8217;t what you would expect us to do. You can help us improve our mapping to fit your needs.&lt;/p&gt;
&lt;p&gt;In our test suites we have &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; files representing these mappings and their corresponding &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; files. Then, we run it by comparing the parsed document to the &lt;span class=&quot;caps&quot;&gt;YAML&lt;/span&gt; mappings.&lt;/p&gt;
&lt;p&gt;Here is and &lt;span class=&quot;caps&quot;&gt;XML&lt;/span&gt; feed :&lt;br /&gt;
&lt;script src=&quot;http://gist.github.com/138121.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;Here is a example of mapping :&lt;br /&gt;
&lt;script src=&quot;http://gist.github.com/138122.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;If you have identified a feed that you think we&amp;#8217;re not parsing correctly, please, send us a this feed.xml file, along with the corresponding specification yaml file. We will then &lt;strong&gt;fix our code so that we extract the right info from your file&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;You can use this &lt;a href=&quot;http://gist.github.com/138123&quot;&gt;template&lt;/a&gt; for the mapping file.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Building Realtime : turning feeds into streams</title>
        
        <category term="realtime" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="infrastructure" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/gospel/infrastructure/realtime/building-realtime"/>
        <updated>2009-06-28T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/gospel/infrastructure/realtime/building-realtime</id>
        <content type="html">&lt;p&gt;Technically, &lt;a href=&quot;http://en.wikipedia.org/wiki/Real-time_computing&quot;&gt;Real-Time Computing&lt;/a&gt; implies that there is a &lt;em&gt;time constraint&lt;/em&gt; in a system, it&amp;#8217;s &lt;strong&gt;different from instantaneity&lt;/strong&gt;. A real-time service is a service that can guarantee that it would do something in a given amount of time. &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; is real-time, since we can guarantee that we will notify new entries in a feed to our users within a 15 minutes time frame.&lt;/p&gt;
&lt;p&gt;This is only achievable if we &amp;#8220;&lt;strong&gt;push&lt;/strong&gt;&amp;#8221; the information toward our users. We couldn&amp;#8217;t guarantee delivery time if we asked them to &amp;#8220;pull&amp;#8221; from us&lt;sup class=&quot;footnote&quot;&gt;&lt;a href=&quot;#fn1&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;This is a keyword here : in a real-time web, &lt;strong&gt;information is pushed from a place to another one&lt;/strong&gt;. &lt;em&gt;Facebook pushes my friend updates to my homepage, Twitter search pushes new result to the result page, Friendfeed pushes the conversation to a topic&amp;#8217;s page&amp;#8230; etc&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;Unfortunately, as the web is right now, the information is almost never pushed to anybody. Look at this blog. I will publish this blog post and wait for you, for Google, for search engines to actually pull its content. Similarly, these services, once they have the information will probably not push it to anyone.&lt;/p&gt;
&lt;p&gt;In a perfect world, not only I would push this new content to you readers, to Google, to Delicious, to Digg, to Twitter, but also these services would push an update to their users and other services to notify them that received something from superfeedr&amp;#8230; and so on.&lt;/p&gt;
&lt;p&gt;Our mission at Superfeedr is to take all these &amp;#8216;static&amp;#8217; bits of information that are feeds, and push them to your services so that you can as well push them (or derived information) to other services&amp;#8230; creating a stream.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;We&amp;#8217;re turning feeds into stream.&lt;/strong&gt;&lt;/p&gt;
&lt;p class=&quot;footnote&quot; id=&quot;fn1&quot;&gt;&lt;sup&gt;1&lt;/sup&gt; On top of that, &lt;a href=&quot;http://blog.superfeedr.com/gospel/something-stupid/&quot;&gt;pull is stupid&lt;/a&gt; .&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>A better Schema</title>
        
        <category term="Atom" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="schema" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/Atom/schema/a-better-schema"/>
        <updated>2009-06-25T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/Atom/schema/a-better-schema</id>
        <content type="html">&lt;p&gt;One of the great features of &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; is that it sends a standard format for feed entries. Whether the initial feed format was any flavor of Atom, or &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;, we would map this into a standard Atom feed. Thanks to that it is &lt;strong&gt;easier&lt;/strong&gt; for you to integrate this data into your apps, since you will gain &lt;em&gt;consistency&lt;/em&gt; in the format.&lt;/p&gt;
&lt;p&gt;However, to achieve that, we have to make some decisions and scraps information from the initial feed. Mapping a title is easy, but that&amp;#8217;s about the only obvious data. We actually had to find the smallest common set of attribute that a feed has.&lt;br /&gt;
Up to now, entries that we sent had this :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;ID&lt;/li&gt;
	&lt;li&gt;&lt;span class=&quot;caps&quot;&gt;URL&lt;/span&gt;&lt;/li&gt;
	&lt;li&gt;Title&lt;/li&gt;
	&lt;li&gt;Summary&lt;/li&gt;
	&lt;li&gt;Published date&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We&amp;#8217;ve been working to complete that over the past few weeks, and here is what you will soon get, on top of what you already have:&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Content (if available, if not, you&amp;#8217;ll get a summary)&lt;/li&gt;
	&lt;li&gt;Categories (or tags)&lt;/li&gt;
	&lt;li&gt;Authors informations : email, name and uri&lt;/li&gt;
	&lt;li&gt;Links : not only you will get the entry&amp;#8217;s url, but you will also get any other link that the entry may contain : enclosure, comments&amp;#8230; etc.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The new schema will be published soon, but first, we want to make sure that there is no other element that you would want to see added to it. What would you add in there?&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>RSS or Atom, not both!</title>
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="feeds" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/feeds/gospel/atom-or-rss-not-both"/>
        <updated>2009-06-23T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/feeds/gospel/atom-or-rss-not-both</id>
        <content type="html">&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/RSS_(file_format&quot;&gt;&lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;&lt;/a&gt;) and &lt;a href=&quot;http://www.atomenabled.org/developers/syndication/atom-format-spec.php&quot;&gt;&lt;span class=&quot;caps&quot;&gt;ATOM&lt;/span&gt;&lt;/a&gt; have very similar (if not identical) purposes. I don&amp;#8217;t know any feed consumer that consumes only one type, yet, a lot of services are still providing both.&lt;/p&gt;
&lt;p&gt;Publishing both is useless, because it&amp;#8217;s likely that services will end up polling both of them, to identify new content. It is very hard for them to be 100% sure that they actually contain (and will always contain) the same information. You know that &lt;a href=&quot;http://blog.superfeedr.com/gospel/something-stupid/&quot;&gt;polling your blog or service is stupid&lt;/a&gt;&amp;#8230; don&amp;#8217;t make twice as stupid.&lt;/p&gt;
&lt;p&gt;Yet, if you publish both &lt;span class=&quot;caps&quot;&gt;ATOM&lt;/span&gt; and &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;, make our lives easier in two steps :&lt;/p&gt;
&lt;ul&gt;
	&lt;li&gt;Remove the extra &lt;code&gt;&amp;lt;link href=&quot;...&quot;&amp;gt;&lt;/code&gt;, by keeping just Atom or &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
	&lt;li&gt;Add a 301 redirection from one to another, so that you&amp;#8217;re not messing with your existing pollers (as they should probably follow redirections and be able to parse either format) : with Apache it&amp;#8217;s as easy as: &lt;code&gt;RedirectMatch 301 /statuses/user_timeline/(.*)\.rss http://twitter.com/statuses/user_timeline/$1.atom&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;No more excuse for not doing it! Please note that I am not discussing whether you should keep &lt;span class=&quot;caps&quot;&gt;ATOM&lt;/span&gt; or &lt;span class=&quot;caps&quot;&gt;RSS&lt;/span&gt;. I&amp;#8217;d go for Atom, but that&amp;#8217;s a not the case for everybody.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>We're doing something stupid so that you don't have to</title>
        
        <category term="gospel" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/gospel/something-stupid"/>
        <updated>2009-06-19T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/gospel/something-stupid</id>
        <content type="html">&lt;p&gt;It&amp;#8217;s a fact, polling sucks, and it sucks, because it&amp;#8217;s stupid. This is what &lt;a href=&quot;http://twitter.com/kellan&quot;&gt;kellan&lt;/a&gt; and &lt;a href=&quot;http://twitter.com/rabble&quot;&gt;rabble&lt;/a&gt; &lt;a href=&quot;http://www.slideshare.net/rabble/beyond-rest-building-data-services-with-xmpp-pubsub?src=embed&quot;&gt;showed last year&lt;/a&gt; at &lt;span class=&quot;caps&quot;&gt;OSCON&lt;/span&gt; :&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;On July 21, 2008, Friendfeed hit Flickr 2.9 million times to get the latest photos of 45,754 users, of which 6,721 visited Flickr in that 24-hour period, and could have potentially uploaded a photo.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;And this is &lt;strong&gt;just friendfeed&lt;/strong&gt;. How many services is there around here that are polling Flickr, Twitter, Delicious, Youtube, or even this blog? Thousands (except maybe for this blog).&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/polling_sucks.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Push is the solution&lt;/strong&gt;. Except that it only works if each service out there pushes, and if each consumer actually accepts to receive pushed content. That makes it pretty hypothetical, right?&lt;/p&gt;
&lt;p&gt;We (pollers) should &lt;strong&gt;collaborate&lt;/strong&gt;. Collaboration means that, even if we can all poll, there is probably no need for that. &lt;em&gt;We could probably all grow tomatoes, but it makes more sense to buy them from someone who can grow them cheaper and more effectively than us&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;This is what &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; is all about: &lt;del&gt;growing tomatoes&lt;/del&gt; doing something that you could do, but doing it &lt;a href=&quot;http://superfeedr.com/cost&quot;&gt;cheaper&lt;/a&gt;, more efficiently and, more importantly, by sharing the results with you.&lt;/p&gt;
&lt;p&gt;Yes, polling is still stupid, but we&amp;#8217;re doing it for you and everybody who cares about the same feeds.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>PubSubHubbub</title>
        
        <category term="api" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="http" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <category term="pubsubhubbub" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/api/http/pubsubhubbub/pubsubhubbub"/>
        <updated>2009-06-18T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/api/http/pubsubhubbub/pubsubhubbub</id>
        <content type="html">&lt;p&gt;We&amp;#8217;re proud to announce that &lt;a href=&quot;http://superfeedr.com&quot;&gt;Superfeedr&lt;/a&gt; is one of the very first services to actually support the infamous &lt;a href=&quot;http://code.google.com/p/pubsubhubbub/&quot;&gt;PubSubHubbub&lt;/a&gt; protocol. If you think the name is ugly, check the &lt;span class=&quot;caps&quot;&gt;CSS&lt;/span&gt; style of the &lt;a href=&quot;http://pubsubhubbub.googlecode.com/svn/trunk/pubsubhubbub-core-0.1.html&quot;&gt;spec&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This presentation should give you enough details about PubSubhubbub.&lt;br /&gt;
&lt;iframe src='http://docs.google.com/EmbedSlideshow?docid=ajd8t6gk4mh2_34dvbpchfs&amp;amp;size=s' frameborder='0' width='400' height='350'&gt;&lt;/iframe&gt;&lt;/p&gt;
&lt;p&gt;What does that mean for you superfeedr users? It means that you can get the &lt;span class=&quot;caps&quot;&gt;ATOM&lt;/span&gt; payload of the feeds we parsed pushed to your endpoint url. Check our &lt;a href=&quot;http://groups.google.com/group/superfeedr/web/pubsubhubbub&quot;&gt;implementation notes&lt;/a&gt; to learn more.&lt;/p&gt;
&lt;p&gt;Ha, I almost forgot, you can find our hub there &lt;a href=&quot;http://superfeedr.com/hubbub&quot;&gt;http://superfeedr.com/hubbub&lt;/a&gt;.&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
    <entry>
        <title>Hello World</title>
        
        <category term="meta" scheme="http://www.sixapart.com/ns/types#tag" />
        
        <link href="http://blog.superfeedr.com/meta/hello-world"/>
        <updated>2009-06-17T00:00:00-07:00</updated>
        <id>blog.superfeedr.com:/meta/hello-world</id>
        <content type="html">&lt;p&gt;Welcome to the Superfeedr&amp;#8217;s blog. I am not sure what you expect from here. You know what a geek does when he&amp;#8217;s embarrassed does, right? He gets into technical details.&lt;/p&gt;
&lt;p&gt;This blog has been built with the great piece of code that &lt;a href=&quot;http://github.com/mojombo/jekyll/tree/master&quot;&gt;Jekyll&lt;/a&gt; is. It is hosted on &lt;a href=&quot;http://github.com&quot;&gt;Github&lt;/a&gt;, and I used &lt;a href=&quot;http://macromates.com/&quot;&gt;TextMate&lt;/a&gt; Version 1.5.8 (1498) to write it. I also used &lt;a href=&quot;http://git-scm.com/&quot;&gt;Git&lt;/a&gt; to push it on our &lt;a href=&quot;http://github.com/superfeedr&quot;&gt;Github&lt;/a&gt; repository. TextMate runs on my &lt;a href=&quot;http://www.apple.com/macbookpro/&quot;&gt;MacBookPro&lt;/a&gt; 2.53 Ghz Intel Core 2 Duo, with 4 GB of DD3 &lt;span class=&quot;caps&quot;&gt;RAM&lt;/span&gt;. It&amp;#8217;s about 85° F in the &lt;a href=&quot;http://maps.google.com/maps?client=safari&amp;amp;q=PariSoma&amp;amp;oe=UTF-8&amp;amp;ie=UTF8&amp;amp;hl=en&amp;amp;ll=37.774446,-122.41044&amp;amp;spn=0.04152,0.086002&amp;amp;z=14&amp;amp;iwloc=A&quot;&gt;room&lt;/a&gt; in which I am working right now.&lt;/p&gt;
&lt;p&gt;Welcome!&lt;/p&gt;</content>
        <author>
            <name>Julien</name>
            <uri>http://twitter.com/julien51</uri>
        </author>
    </entry>
    
</feed>